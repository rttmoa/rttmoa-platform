{"version":3,"file":"Lane1【备份】-18142818.js","sources":["../../../src/views/module/storage/components/Lane1【备份】.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Space, Table, Tag, Tooltip } from 'antd'\r\nimport type { TableProps } from 'antd'\r\nimport './index.less'\r\n\r\n// ! http://localhost:9527/#/module/storage\r\n\r\ninterface DataType {\r\n\tkey?: string\r\n\tlane: number\r\n\trow: number\r\n\tlayer: number\r\n\tcolumn1: number\r\n\tcolumn2: number\r\n\tcolumn3: number\r\n\tcolumn4: number\r\n\tcolumn5: number\r\n\tcolumn6: number\r\n\tcolumn7: number\r\n\tcolumn8: number\r\n\tcolumn9: number\r\n\tcolumn10: number\r\n\tcolumn11: number\r\n}\r\n\r\n//* 表格提示框，鼠标悬停时显示的内容  ——  货位信息：货品名词、生产日期、在库整数总数\r\nfunction titleFN(data: string, record?: any, index?: number) {\r\n\t// console.log('titleFN', data, record, index)\r\n\tif (!data) return null\r\n\tconst lane = record?.lane ?? ''\r\n\tconst row = record?.row ?? ''\r\n\tconst layer = record?.layer ?? ''\r\n\tconst str = `${row}排 - ${layer}层 - ${data}列`\r\n\r\n\tlet color = data === '空闲' ? '#B4EEB4' : '#FF6A6A' // 绿色 / 红色\r\n\tcolor = '#FFF'\r\n\r\n\treturn (\r\n\t\t<Tooltip\r\n\t\t\tplacement=\"top\"\r\n\t\t\tcolor=\"#fff\"\r\n\t\t\ttitle={\r\n\t\t\t\t<table className=\"w-full border-collapse  text-slate-700 \">\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th className=\"w-[250px] text-[12px] text-center\">货品名词</th>\r\n\t\t\t\t\t\t<th className=\"w-[150px] text-[12px] text-center\">生产日期</th>\r\n\t\t\t\t\t\t<th className=\"w-[350px] text-[12px] text-center\">在库整数总数</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td className=\"  text-[12px] text-center\">食品火腿肠</td>\r\n\t\t\t\t\t\t<td className=\"  text-[12px] text-center\">2020-11-19 12:32:00</td>\r\n\t\t\t\t\t\t<td className=\"w-[350px] text-[12px] text-center\">500箱0根</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t}>\r\n\t\t\t{/* {str} */}\r\n\t\t\t<div style={{ backgroundColor: color, padding: '4px 8px', textAlign: 'center' }}>{str}</div>\r\n\t\t</Tooltip>\r\n\t)\r\n}\r\n\r\nconst statuses = ['空闲', '占用']\r\nconst randomStatus = statuses[Math.floor(Math.random() * statuses.length)]\r\nconsole.log(randomStatus) // 随机输出：空闲 或 占用\r\nlet rawData: any[] = []\r\nfor (let w = 1; w < 2; w++) {\r\n\t// 巷道\r\n\tfor (let i = 1; i < 3; i++) {\r\n\t\t// 排\r\n\t\tfor (let j = 1; j < 7; j++) {\r\n\t\t\t// 列\r\n\t\t\tfor (let k = 1; k < 5; k++) {\r\n\t\t\t\t// 层\r\n\t\t\t\tconst res = `第${i}排 ${j}列 ${k}层`\r\n\t\t\t\tconsole.log(res)\r\n\t\t\t\tlet obj = {}\r\n\t\t\t\tif (j == 1) Object.assign(obj, { column1: j })\r\n\t\t\t\tif (j == 2) Object.assign(obj, { column2: j })\r\n\t\t\t\tif (j == 3) Object.assign(obj, { column3: j })\r\n\t\t\t\tif (j == 4) Object.assign(obj, { column4: j })\r\n\t\t\t\tif (j == 5) Object.assign(obj, { column5: j })\r\n\t\t\t\tif (j == 6) Object.assign(obj, { column6: j })\r\n\t\t\t\trawData.push({\r\n\t\t\t\t\tkey: res,\r\n\t\t\t\t\tlane: w, // 巷道\r\n\t\t\t\t\trow: i, // 排\r\n\t\t\t\t\tcolumn: j, // 列\r\n\t\t\t\t\tlayer: k, // 层\r\n\t\t\t\t\tstatus: randomStatus,\r\n\t\t\t\t\t...obj,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n// console.log('货位 rawData：', rawData)\r\n// !  这个数组，lane相同合并行，row一样合并行，该如何处理这个数组？\r\n\r\n// 📌 1️⃣ 处理数据，把 column1 ~ columnN 结构整理好\r\nconst groupedData: any[] = []\r\n\r\nrawData.forEach(item => {\r\n\tconst { lane, row, layer, column } = item\r\n\tconst key = `第${lane}巷道 - ${row}排 - ${layer}层`\r\n\r\n\tlet existing = groupedData.find(d => d.key === key)\r\n\tif (!existing) {\r\n\t\texisting = {\r\n\t\t\tkey,\r\n\t\t\tlane,\r\n\t\t\trow,\r\n\t\t\tlayer,\r\n\t\t\tcolumn1: null,\r\n\t\t\tcolumn2: null,\r\n\t\t\tcolumn3: null,\r\n\t\t\tcolumn4: null,\r\n\t\t\tcolumn5: null,\r\n\t\t\tcolumn6: null,\r\n\t\t\t// ...item,\r\n\t\t}\r\n\t\tgroupedData.push(existing)\r\n\t}\r\n\r\n\t// 按列号填充 column1 ~ columnN\r\n\texisting[`column${column}`] = column\r\n})\r\n\r\nconsole.log('货位 rawData：', rawData) //* 总共24条\r\nconsole.log('初始 groupedData', groupedData) //* 总共8条\r\n\r\n// 📌 2️⃣ 处理 rowSpan，合并相同行\r\nconst rowSpanMap = new Map<string, number>()\r\ngroupedData.forEach((item, index) => {\r\n\tconst key = `${item.lane}-${item.row}-${item.layer}`\r\n\tif (!rowSpanMap.has(key)) {\r\n\t\trowSpanMap.set(key, groupedData.filter(d => d.lane === item.lane && d.row === item.row && d.layer === item.layer).length)\r\n\t}\r\n})\r\nconsole.log('处理后 groupedData', groupedData)\r\ngroupedData.sort((a, b) => {\r\n\tif (a.row != b.row) {\r\n\t\treturn a.row - b.row // 按 row 升序\r\n\t}\r\n\treturn b.layer - a.layer // 按 layer 降序\r\n})\r\nconsole.log('排序 groupedData', groupedData)\r\n\r\n// http://localhost:9527/#/module/storage\r\nconst columns: TableProps<DataType>['columns'] = [\r\n\t{\r\n\t\ttitle: 'RowHead',\r\n\t\tdataIndex: 'key',\r\n\t\t// rowScope: 'row', //* title  以身入局\r\n\t\twidth: 120,\r\n\t\tfixed: 'left',\r\n\t},\r\n\t// {\r\n\t// \ttitle: '巷道',\r\n\t// \tdataIndex: 'lane',\r\n\t// \tkey: 'lane',\r\n\t// \twidth: 50,\r\n\t// \trender: (value, row, index) => {\r\n\t// \t\t// 拿到当前行\r\n\t// \t\tconst currentLane = row.lane\r\n\t// \t\tconst currentRow = row.row\r\n\r\n\t// \t\t// 查找前面的行\r\n\t// \t\tconst prevRow = groupedData[index - 1]\r\n\t// \t\tif (prevRow && prevRow.lane === currentLane) {\r\n\t// \t\t\t// 如果上一行 lane、row 一样，说明应该被合并\r\n\t// \t\t\treturn {\r\n\t// \t\t\t\tchildren: null,\r\n\t// \t\t\t\tprops: { rowSpan: 0 },\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\r\n\t// \t\t// 计算有多少行是需要合并的\r\n\t// \t\tlet rowSpan = 1\r\n\t// \t\tfor (let i = index + 1; i < groupedData.length; i++) {\r\n\t// \t\t\tif (groupedData[i].lane === currentLane) {\r\n\t// \t\t\t\trowSpan++\r\n\t// \t\t\t} else {\r\n\t// \t\t\t\tbreak\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t\tconsole.log('rowSpan', rowSpan)\r\n\t// \t\treturn {\r\n\t// \t\t\tchildren: value,\r\n\t// \t\t\tprops: { rowSpan },\r\n\t// \t\t}\r\n\t// \t},\r\n\t// },\r\n\t{\r\n\t\ttitle: '排',\r\n\t\tdataIndex: 'row',\r\n\t\tkey: 'row',\r\n\t\twidth: 50,\r\n\t\trender: (value, row, index) => {\r\n\t\t\t// 拿到当前行\r\n\t\t\tconst currentLane = row.lane\r\n\t\t\tconst currentRow = row.row\r\n\r\n\t\t\t// 查找前面的行\r\n\t\t\tconst prevRow = groupedData[index - 1]\r\n\t\t\tif (prevRow && prevRow.row === currentRow) {\r\n\t\t\t\t// 如果上一行 lane、row 一样，说明应该被合并\r\n\t\t\t\treturn {\r\n\t\t\t\t\tchildren: null,\r\n\t\t\t\t\tprops: { rowSpan: 0 },\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 计算有多少行是需要合并的\r\n\t\t\tlet rowSpan = 1\r\n\t\t\tfor (let i = index + 1; i < groupedData.length; i++) {\r\n\t\t\t\tif (groupedData[i].row === currentRow) {\r\n\t\t\t\t\trowSpan++\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tchildren: value,\r\n\t\t\t\tprops: { rowSpan },\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\ttitle: '层',\r\n\t\tdataIndex: 'layer',\r\n\t\tkey: 'layer',\r\n\t\twidth: 50,\r\n\t},\r\n\t{\r\n\t\ttitle: '第1列',\r\n\t\tdataIndex: 'column1',\r\n\t\tkey: 'column1',\r\n\t\trender: (value, record, index) => titleFN(value, record, index),\r\n\t},\r\n\t{\r\n\t\ttitle: '第2列',\r\n\t\tdataIndex: 'column2',\r\n\t\tkey: 'column2',\r\n\t\trender: (value, record, index) => titleFN(value, record, index),\r\n\t},\r\n\t{\r\n\t\ttitle: '第3列',\r\n\t\tdataIndex: 'column3',\r\n\t\tkey: 'column3',\r\n\t\trender: (value, record, index) => titleFN(value, record, index),\r\n\t},\r\n\t{\r\n\t\ttitle: '第4列',\r\n\t\tdataIndex: 'column4',\r\n\t\tkey: 'column4',\r\n\t\trender: (value, record, index) => titleFN(value, record, index),\r\n\t},\r\n\t{\r\n\t\ttitle: '第5列',\r\n\t\tdataIndex: 'column5',\r\n\t\tkey: 'column5',\r\n\t\trender: (value, record, index) => titleFN(value, record, index),\r\n\t},\r\n\t{\r\n\t\ttitle: '第6列',\r\n\t\tdataIndex: 'column6',\r\n\t\tkey: 'column6',\r\n\t\trender: (value, record, index) => titleFN(value, record, index),\r\n\t},\r\n]\r\nconsole.log('columns length', columns.length)\r\n\r\nconst Lane: React.FC = () => {\r\n\tconsole.log('巷道一')\r\n\tlet Header = (\r\n\t\t<div className=\"flex\">\r\n\t\t\t<div className=\"w-[80px] px-[4px] py-[6px]  text-center text-[12px] bg-slate-100\">空库位</div>\r\n\t\t\t<div className=\"w-[80px] px-[4px] py-[6px]  text-center text-[12px] bg-pink-300\">预占用库位</div>\r\n\t\t\t<div className=\"w-[80px] px-[4px] py-[6px]  text-center text-[12px] bg-green-400\">有库存库位</div>\r\n\t\t\t<div className=\"w-[80px] px-[4px] py-[6px]  text-center text-[12px] bg-slate-100 text-red-500\">选中库位</div>\r\n\t\t</div>\r\n\t)\r\n\treturn (\r\n\t\t<Table<DataType>\r\n\t\t\tclassName=\"cusTable\"\r\n\t\t\ttitle={() => Header}\r\n\t\t\tcolumns={columns}\r\n\t\t\tdataSource={groupedData}\r\n\t\t\t// scroll={{ x: \"max-content\" }}\r\n\t\t\tscroll={{ x: columns.length * 150 }}\r\n\t\t\tpagination={false}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Lane\r\n"],"names":["titleFN","data","record","index","row","layer","str","color","jsx","Tooltip","jsxs","statuses","randomStatus","rawData","w","i","j","k","res","obj","groupedData","item","lane","column","key","existing","d","rowSpanMap","a","b","columns","value","currentRow","prevRow","rowSpan","Lane","Header","Table"],"mappings":"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"}