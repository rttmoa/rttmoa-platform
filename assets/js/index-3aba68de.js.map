{"version":3,"file":"index-3aba68de.js","sources":["../../../src/views/system/dept/index.tsx"],"sourcesContent":["import { useRef, useState } from 'react';\r\nimport { Form } from 'antd';\r\nimport { formatDataForProTable } from '@/utils';\r\nimport { UserList } from '@/api/interface';\r\nimport { ProTable } from '@ant-design/pro-components';\r\nimport type { ActionType, FormInstance } from '@ant-design/pro-components';\r\nimport { message } from '@/hooks/useMessage';\r\nimport TableColumnsConfig from './component/ColumnConfig';\r\nimport ToolBarRender from './component/ToolBar';\r\nimport { addDept, delDept, findDept, modifyDept } from '@/api/modules/system/common';\r\nimport './index.less';\r\nimport ModalComponent from './component/Modal';\r\nimport DrawerComponent from './component/Drawer';\r\nimport FooterComponent from './component/Footer';\r\n\r\nexport type FormValueType = {\r\n\ttarget?: string;\r\n\ttemplate?: string;\r\n\ttype?: string;\r\n\ttime?: string;\r\n\tfrequency?: string;\r\n} & Partial<UserList>;\r\n\r\nconst useProTable = () => {\r\n\tconst actionRef = useRef<ActionType>(); // 表格 ref\r\n\tconst formRef = useRef<FormInstance>(); // 表单 ref\r\n\r\n\tconst [form] = Form.useForm();\r\n\r\n\tconst [openSearch, SetOpenSearch] = useState<boolean>(false); // 工具栏：开启关闭表单搜索\r\n\tconst [selectedRows, setSelectedRows] = useState<any[]>([]); // 表格：选择行数据\r\n\tconst [loading, SetLoading] = useState<boolean>(false); // Loading\r\n\tconst [menuList, setMenuList] = useState<[]>([]); // Menu：接口中菜单、拿给子组件用\r\n\tconst [pagination, SetPagination] = useState<any>({ page: 1, pageSize: 10, total: 0 }); // 分页数据\r\n\r\n\t// Drawer\r\n\tconst [drawerCurrentRow, setDrawerCurrentRow] = useState({}); // Drawer 选择当前行数据\r\n\tconst [drawerIsVisible, setDrawerIsVisible] = useState<boolean>(false); // Drawer 是否显示\r\n\r\n\t// Modal\r\n\tconst [modalIsVisible, setModalIsVisible] = useState<boolean>(false);\r\n\tconst [modalTitle, setModalTitle] = useState<string>('');\r\n\tconst [modalType, setModalType] = useState<string>('');\r\n\tconst [modalUserInfo, setModalUserInfo] = useState({});\r\n\r\n\tconst quickSearch = () => {};\r\n\r\n\t// * 操作 — 员工： 新建、编辑、详情、删除  按钮\r\n\tconst handleOperator = async (type: string, item: any) => {\r\n\t\tconsole.log('操作：类型+记录', type, item);\r\n\t\tif (type === 'detail') {\r\n\t\t\tsetDrawerIsVisible(true);\r\n\t\t\tsetDrawerCurrentRow(item);\r\n\t\t} else if (type === 'create') {\r\n\t\t\tsetModalIsVisible(true);\r\n\t\t\tsetModalTitle('新建菜单');\r\n\t\t\tsetModalType(type);\r\n\t\t\tsetModalUserInfo({});\r\n\t\t} else if (['edit'].includes(type)) {\r\n\t\t\tsetModalIsVisible(true);\r\n\t\t\tsetModalTitle(type === 'edit' ? '编辑菜单' : '查看详情');\r\n\t\t\tsetModalType(type);\r\n\t\t\tsetModalUserInfo(item);\r\n\t\t} else if (type === 'delete') {\r\n\t\t\tconst hide = message.loading('正在删除');\r\n\t\t\ttry {\r\n\t\t\t\tconst result: any = await delDept(item.unique);\r\n\t\t\t\t// console.log('删除菜单结果：', result);\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\thide();\r\n\t\t\t\t\tactionRef?.current?.reload();\r\n\t\t\t\t\tmessage.success(`删除 ${item?.name} 成功`);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\thide();\r\n\t\t\t\tmessage.error('删除失败、请再试一次！');\r\n\t\t\t}\r\n\t\t} else if (type === 'moreDelete') {\r\n\t\t\tmessage.loading('删除更多按钮、正在实现');\r\n\t\t\t// const hide = message.loading('正在删除');\r\n\t\t\t// try {\r\n\t\t\t// \tconst selectIds = selectedRows.map(value => value?._id);\r\n\t\t\t// \tconsole.log('selectIds', selectIds);\r\n\t\t\t// \tconst res: any = await delMoreJob(selectIds || []);\r\n\t\t\t// \tif (res) {\r\n\t\t\t// \t\thide();\r\n\t\t\t// \t\tsetSelectedRows([]);\r\n\t\t\t// \t\tactionRef.current?.reloadAndRest?.();\r\n\t\t\t// \t\tmessage.success('全部删除完成！');\r\n\t\t\t// \t}\r\n\t\t\t// } catch (error) {\r\n\t\t\t// \thide();\r\n\t\t\t// \tmessage.error('删除失败、请再试一次！');\r\n\t\t\t// }\r\n\t\t}\r\n\t};\r\n\t// * 操作 — 员工： 新建、编辑、详情  弹窗内容提交\r\n\tconst handleModalSubmit = async (type: string, item: any) => {\r\n\t\tconsole.log('Modal 提交：', type, item);\r\n\t\t// 1、获取字段数据\r\n\t\t// 2、将字段传入到接口中\r\n\t\t// 3、获取返回值并展示\r\n\t\t// 4、清空表单值\r\n\t\t// 5、关闭弹窗\r\n\t\t// 6、重新回去菜单列表\r\n\t\tconst hide = message.loading(type == 'create' ? '正在添加' : '正在编辑');\r\n\t\ttry {\r\n\t\t\tlet res = type === 'create' ? await addDept(item) : await modifyDept(item._id, item);\r\n\t\t\tif (res) {\r\n\t\t\t\thide();\r\n\t\t\t\tform.resetFields();\r\n\t\t\t\tsetModalTitle('');\r\n\t\t\t\tsetModalType('');\r\n\t\t\t\tsetModalIsVisible(false);\r\n\t\t\t\tsetModalUserInfo({});\r\n\t\t\t\tif (actionRef.current) actionRef.current.reload();\r\n\t\t\t\tmessage.success(type == 'create' ? '添加成功' : '编辑成功');\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\thide();\r\n\t\t\tmessage.error(error.message || error.msg);\r\n\t\t}\r\n\t};\r\n\r\n\t// * 工具栏 ToolBar\r\n\tlet ToolBarParams: any = {\r\n\t\tquickSearch, // 工具栏：快捷搜索\r\n\t\topenSearch,\r\n\t\tSetOpenSearch, // 工具栏：开启表单搜索\r\n\t\thandleOperator,\r\n\t};\r\n\t// * 表格封装成通用\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ProTable<UserList>\r\n\t\t\t\trowKey='unique' // ! 此key设置错误、导致点击某一个展开、全部节点全展开\r\n\t\t\t\tclassName='ant-pro-table-scroll'\r\n\t\t\t\tscroll={{ y: '100vh' }} // 100vh\r\n\t\t\t\t// bordered\r\n\t\t\t\t// cardBordered\r\n\t\t\t\tdateFormatter='string'\r\n\t\t\t\theaderTitle='使用 ProTable'\r\n\t\t\t\tdefaultSize='small'\r\n\t\t\t\tloading={loading}\r\n\t\t\t\tcolumns={TableColumnsConfig(handleOperator)}\r\n\t\t\t\ttoolBarRender={() => ToolBarRender(ToolBarParams)} // 渲染工具栏\r\n\t\t\t\tactionRef={actionRef} // Table action 的引用，便于自定义触发 actionRef.current.reset()\r\n\t\t\t\tformRef={formRef} // 可以获取到查询表单的 form 实例\r\n\t\t\t\trequest={async (params, sort, filter) => {\r\n\t\t\t\t\tSetLoading(true);\r\n\t\t\t\t\tconst res: any = await findDept({});\r\n\t\t\t\t\tconsole.log('获取部门：', res);\r\n\t\t\t\t\tlet format = {\r\n\t\t\t\t\t\tlist: res.data,\r\n\t\t\t\t\t\tcurrent: res.page || 1,\r\n\t\t\t\t\t\tpageSize: res.pageSise || 10,\r\n\t\t\t\t\t\ttotal: res.total || 10,\r\n\t\t\t\t\t};\r\n\t\t\t\t\tsetMenuList(res.data);\r\n\t\t\t\t\tSetLoading(false);\r\n\t\t\t\t\tSetPagination({ ...pagination, total: format.total });\r\n\t\t\t\t\treturn formatDataForProTable<any>({ ...format });\r\n\t\t\t\t}}\r\n\t\t\t\tsearch={false}\r\n\t\t\t\tpagination={false}\r\n\t\t\t\toptions={false}\r\n\t\t\t\trowSelection={{\r\n\t\t\t\t\tonChange: (selectedRowKeys, selectedRows) => {\r\n\t\t\t\t\t\tsetSelectedRows(selectedRows);\r\n\t\t\t\t\t},\r\n\t\t\t\t}}\r\n\t\t\t\tghost={false}\r\n\t\t\t\tonSizeChange={() => {}} // Table 尺寸发生改变、将尺寸存储到数据库中\r\n\t\t\t\tonRequestError={(error: any) => {}} // 数据加载失败时触发\r\n\t\t\t\teditable={{ type: 'multiple' }}\r\n\t\t\t\tcolumnsState={{\r\n\t\t\t\t\t// 持久化列的 key，用于判断是否是同一个 table\r\n\t\t\t\t\tpersistenceKey: 'use-pro-table-key',\r\n\t\t\t\t\t// 持久化列的类型: localStorage | sessionStorage\r\n\t\t\t\t\tpersistenceType: 'localStorage',\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t\t{selectedRows?.length > 0 && <FooterComponent actionRef={actionRef} selectedRows={selectedRows} setSelectedRows={setSelectedRows} handleOperator={handleOperator} />}\r\n\t\t\t<ModalComponent\r\n\t\t\t\tform={form}\r\n\t\t\t\tmenuList={menuList}\r\n\t\t\t\tmodalTitle={modalTitle} // 标题\r\n\t\t\t\tmodalType={modalType} // 类型\r\n\t\t\t\tmodalIsVisible={modalIsVisible} // 显示\r\n\t\t\t\tmodalMenuInfo={modalUserInfo} // 菜单信息\r\n\t\t\t\tsetModalIsVisible={setModalIsVisible} // 设置显示\r\n\t\t\t\thandleModalSubmit={handleModalSubmit}\r\n\t\t\t/>\r\n\t\t\t<DrawerComponent\r\n\t\t\t\tdrawerIsVisible={drawerIsVisible}\r\n\t\t\t\tdrawerCurrentRow={drawerCurrentRow}\r\n\t\t\t\tsetDrawerCurrentRow={setDrawerCurrentRow}\r\n\t\t\t\tsetDrawerIsVisible={setDrawerIsVisible}\r\n\t\t\t\thandleOperator={handleOperator}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default useProTable;\r\n"],"names":["useProTable","actionRef","useRef","formRef","form","Form","openSearch","SetOpenSearch","useState","selectedRows","setSelectedRows","loading","SetLoading","menuList","setMenuList","pagination","SetPagination","drawerCurrentRow","setDrawerCurrentRow","drawerIsVisible","setDrawerIsVisible","modalIsVisible","setModalIsVisible","modalTitle","setModalTitle","modalType","setModalType","modalUserInfo","setModalUserInfo","quickSearch","handleOperator","type","item","hide","message","delDept","_a","handleModalSubmit","addDept","modifyDept","error","ToolBarParams","jsxs","Fragment","jsx","ProTable","TableColumnsConfig","ToolBarRender","params","sort","filter","res","findDept","format","formatDataForProTable","selectedRowKeys","FooterComponent","ModalComponent","DrawerComponent"],"mappings":"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"}