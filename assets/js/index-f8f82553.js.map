{"version":3,"file":"index-f8f82553.js","sources":["../../../src/assets/dangerouslySetInnerHTML/knowledge.ts","../../../src/views/feat/codeSplitting/index.tsx"],"sourcesContent":["export const asyncComponent = `\n    <p><strong>React 的按需加载</strong></p>\n    <h3 id=\"1-import-\">1. <a href=\"#\">import方法</a></h3>\n    <pre><code><span class=\"hljs-comment\">//asyncComponent.js</span>\n    <span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> loadComponent =&gt; (\n        <span class=\"hljs-keyword\">class</span> AsyncComponent <span class=\"hljs-keyword\">extends</span> React.Component {\n            state = {\n                Component: <span class=\"hljs-literal\">null</span>,\n            }\n            <span class=\"hljs-keyword\">async</span> componentDidMount() {\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.state.Component !== <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>\n\n                <span class=\"hljs-keyword\">try</span> {\n                    <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">default</span>: Component} = <span class=\"hljs-keyword\">await</span> loadComponent()\n                    <span class=\"hljs-keyword\">this</span>.setState({ Component })\n                }<span class=\"hljs-keyword\">catch</span> (err) {\n                    <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'Cannot load component in &lt;AsyncComponent /&gt;'</span>);\n                    <span class=\"hljs-keyword\">throw</span> err\n                }\n            }\n\n            render() {\n                <span class=\"hljs-keyword\">const</span> { Component } = <span class=\"hljs-keyword\">this</span>.state\n                <span class=\"hljs-keyword\">return</span> (Component) ? &lt;Component {...this.props} /&gt; : <span class=\"hljs-literal\">null</span>\n            }\n        }\n    )\n\n\n    <span class=\"hljs-comment\">// index.js</span>\n    <span class=\"hljs-keyword\">import</span> asyncComponent <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./asyncComponent.js'</span>\n    <span class=\"hljs-keyword\">const</span> _import_ = <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> asyncComponent(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(file))\n    _import_(<span class=\"hljs-string\">'components/Home/index.js'</span>)\n    </code></pre><p>原理很简单:</p>\n    <ol>\n    <li><code>import()</code>接受相应的模块然后返回Promise对象</li>\n    <li>asyncComponent 接收一个函数，且这个函数返回promise对象</li>\n    <li>在<code>componentDidMount</code>钩子函数通过 async/await 执行接受进来的loadComponent方法，得到<code>import</code>返回的结果，赋值给state.Component,</li>\n    <li>因为我们import的是一个React组件，所以我们得到的也是React组件，到时候只需要把该组件 <code>render</code>出去就行了</li>\n    </ol>\n    <h3 id=\"2-bundle-import-\">2. <a href=\"#\">Bundle组件 + import</a></h3>\n    <h3 id=\"3-react-loadable\">3. <a href=\"#\">react-loadable</a></h3>\n    <h3 id=\"4-bundle-loader\">4. <a href=\"#\">bundle-loader</a></h3>\n`;\nexport const createComponent = {\n  html1: `\n        <h3 id=\"react-createclass\">React.createClass</h3>\n        <pre><code>    <span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n            <span class=\"hljs-keyword\">const</span> MyComponent = React.createClass({\n                render () {\n                    <span class=\"hljs-keyword\">return</span> (\n                        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是React.createClass生成的组件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\n                    )\n                }\n            })\n        </code></pre><ul>\n        <li>1.React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性</li>\n        <li>2.React.createClass的mixins不够自然、直观；</li>\n        </ul>\n    `,\n  html2: `\n        <h3 id=\"react-component\">React.Component</h3>\n        <pre><code>    <span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> <span class=\"hljs-title\">from</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n                render () {\n                    <span class=\"hljs-keyword\">return</span> (\n                        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是React.Component生成的组件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\n                    )\n                }\n            }\n        </code></pre><ul>\n        <li>1.需要手动绑定this指向</li>\n        <li>2.React.Component形式非常适合高阶组件（Higher Order Components--HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃</li>\n        </ul>\n    `,\n  html3: `\n        <h3 id=\"-\">无状态函数式组件</h3>\n        <pre><code>    <span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n            <span class=\"hljs-keyword\">const</span> MyComponent = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =&gt;</span> (\n                <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是无状态函数式组件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\n            )\n            ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"Sebastian\"</span> /&gt;</span>, mountNode)</span>\n        </code></pre><ul>\n        <li>1.无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，精简至只有一个render方法，大大的增强了编写一个组件的便利</li>\n        <li>2.组件不会被实例化，整体渲染性能得到提升</li>\n        <li>3.组件不能访问<code>this</code>对象</li>\n        <li>4.组件无法访问生命周期的方法</li>\n        <li>5.无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用</li>\n        </ul>\n    `\n};\n\nexport const syntax = {\n  html1: `\n        <pre><code><span class=\"hljs-keyword\">const</span> html=<span class=\"hljs-string\">'&lt;h1&gt;content&lt;/h1&gt;'</span>;  \n\n        React.render(\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=<span class=\"hljs-string\">{{__html:</span> <span class=\"hljs-attr\">html</span>}}&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>,\n            <span class=\"hljs-built_in\">document</span>.body\n        );\n        </code></pre>\n    `,\n  html2: `\n        <pre><code><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">props</span> = {\n            a: <span class=\"hljs-number\">1</span>,\n            b: <span class=\"hljs-number\">2</span>,\n            c: 'text'\n        }\n\n        // 常规\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">component</span> = &lt;Component <span class=\"hljs-attr\">a={props.a}</span> <span class=\"hljs-attr\">b={props.b}</span> <span class=\"hljs-attr\">c={props.c}/&gt;</span>\n\n        // 扩张运算符\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">component</span> = &lt;Component {...props} /&gt;\n        </code></pre>\n    `\n};\n","import React from \"react\";\nimport { Row, Col, Card } from \"antd\";\nimport { asyncComponent } from \"@/assets/dangerouslySetInnerHTML/knowledge\";\n\nexport default () => (\n  <>\n    <Row className=\"gutter-row\">\n      <Col md={24} className=\"gutter-col\">\n        <Card title=\"组件按需加载（Code Splitting）\">\n          <div className=\"fmt\" dangerouslySetInnerHTML={{ __html: asyncComponent }}></div>\n        </Card>\n      </Col>\n    </Row>\n  </>\n);\n"],"names":["asyncComponent","index","jsx","Fragment","Row","Col","Card"],"mappings":"wHAAO,MAAMA,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECI9BC,EAAe,IACbC,EAAAA,IAAAC,EAAAA,SAAA,CACE,SAACD,EAAAA,IAAAE,EAAA,CAAI,UAAU,aACb,SAACF,EAAAA,IAAAG,EAAA,CAAI,GAAI,GAAI,UAAU,aACrB,SAACH,EAAAA,IAAAI,EAAA,CAAK,MAAM,yBACV,SAACJ,EAAAA,IAAA,MAAA,CAAI,UAAU,MAAM,wBAAyB,CAAE,OAAQF,CAAkB,CAAA,CAAA,CAAA,CAC5E,CACF,CAAA,CACF,CAAA,EACF"}