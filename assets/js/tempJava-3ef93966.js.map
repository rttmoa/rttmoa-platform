{"version":3,"file":"tempJava-3ef93966.js","sources":["../../../src/views/feat/codeMirror/tempJava.tsx"],"sourcesContent":["export const tempJava = `import java.util.Random;\r\n\r\npublic class Example {\r\n  public static void main (String[] args){\r\n    // Generate a random number between 1-100. (See generateRandomNumber method.)\r\n    int random = generateRandomNumber(100);\r\n\r\n    // Output generated number.\r\n    System.out.println(\"Generated number: \" + random + \"\\n\");\r\n\r\n    // Loop between 1 and the number we just generated.\r\n    for (int i=1; i<=random; i++){\r\n      // If i is divisible by both 3 and 5, output \"FizzBuzz\".\r\n      if (i % 3 == 0 && i % 5 == 0){\r\n        System.out.println(\"FizzBuzz\");\r\n      }\r\n      // If i is divisible by 3, output \"Fizz\"\r\n      else if (i % 3 == 0){\r\n        System.out.println(\"Fizz\");\r\n      }\r\n      // If i is divisible by 5, output \"Buzz\".\r\n      else if (i % 5 == 0){\r\n        System.out.println(\"Buzz\");\r\n      }\r\n      // If i is not divisible by either 3 or 5, output the number.\r\n      else {\r\n        System.out.println(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n    Generates a new random number between 0 and 100.\r\n    @param bound The highest number that should be generated.\r\n    @return An integer representing a randomly generated number between 0 and 100.\r\n  */\r\n  private static int generateRandomNumber(int bound){\r\n    // Create new Random generator object and generate the random number.\r\n    Random randGen = new Random();\r\n    int randomNum = randGen.nextInt(bound);\r\n\r\n    // If the random number generated is zero, use recursion to regenerate the number until it is not zero.\r\n    if (randomNum < 1){\r\n      randomNum = generateRandomNumber(bound);\r\n    }\r\n\r\n    return randomNum;\r\n  }\r\n}\r\n `\r\n"],"names":["tempJava"],"mappings":"AAAO,MAAMA,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;"}