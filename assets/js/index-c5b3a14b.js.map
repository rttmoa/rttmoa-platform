{"version":3,"file":"index-c5b3a14b.js","sources":["../../../src/views/list/useProTable/index.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport { Button, Col, Drawer, Form, Input, Modal, Row, Space } from 'antd';\r\nimport { formatDataForProTable } from '@/utils';\r\nimport { pagination as paginationConfig } from '@/config/proTable';\r\nimport { UserList } from '@/api/interface';\r\nimport { FooterToolbar, ProDescriptions, ProTable } from '@ant-design/pro-components';\r\nimport type { ActionType, FormInstance, ProDescriptionsItemProps } from '@ant-design/pro-components';\r\nimport { message } from '@/hooks/useMessage';\r\nimport { addRule, updateRule } from '@/api/modules/api_useProTable_eg/api';\r\nimport UpdateForm from './component/UpdateForm';\r\nimport TableColumnsConfig, { TableColumnsParams } from './component/ColumnConfig';\r\nimport ToolBarRender from './component/ToolBar';\r\nimport { DelMoreUser, DelUser, GetProTableUser } from '@/api/modules/system/common';\r\nimport './index.less';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport handle from './component/Operate';\r\nimport ModalComponent from './component/ModalComponent';\r\nimport DrawerComponent from './component/DrawerComponent';\r\nimport FooterComponent from './component/FooterComponent';\r\n\r\nexport type FormValueType = {\r\n\ttarget?: string;\r\n\ttemplate?: string;\r\n\ttype?: string;\r\n\ttime?: string;\r\n\tfrequency?: string;\r\n} & Partial<UserList>;\r\n\r\n// TODO: refer： https://github.com/ant-design/ant-design-pro\r\n// ProTable：https://procomponents.ant.design/components/table\r\nconst useProTable = () => {\r\n\t// console.log('defalut', defalut)\r\n\r\n\tconst actionRef = useRef<ActionType>();\r\n\tconst formRef = useRef<FormInstance>();\r\n\tconst [createModalOpen, handleModalOpen] = useState<boolean>(false);\r\n\tconst [selectedRowsState, setSelectedRows] = useState<any[]>([]); // 表格：选择行数据\r\n\tconst [currentRow, setCurrentRow] = useState<UserList>();\r\n\tconst [showDetail, setShowDetail] = useState<boolean>(false);\r\n\tconst [updateModalOpen, handleUpdateModalOpen] = useState<boolean>(false);\r\n\tconst [pagination, SetPagination] = useState<any>({ page: 1, pageSize: 10, total: 0 }); // 分页数据\r\n\tconst [dataSource, SetdataSource] = useState([]);\r\n\tconst [openSearch, SetOpenSearch] = useState<boolean>(false); // 工具栏：开启关闭表单搜索\r\n\tconst [loading, SetLoading] = useState<boolean>(false); // Loading：加载Loading\r\n\tconst [form] = Form.useForm();\r\n\r\n\tconst [modalIsVisible, setModalIsVisible] = useState<boolean>(false);\r\n\tconst [modalTitle, setModalTitle] = useState<string>('');\r\n\tconst [modalType, setModalType] = useState<string>('');\r\n\tconst [modalUserInfo, setModalUserInfo] = useState({});\r\n\r\n\t// TODO:\r\n\t// 设置 页码值的 useState\r\n\t// 设置 搜索条件的 useState\r\n\t// useEffect 监听值的变化去请求服务端\r\n\t// const GetData = async () => {\r\n\t// \tSetLoading(true);\r\n\t// \tlet queryParams = { ...pagination };\r\n\t// \tconst { data }: any = await GetProTableUser(queryParams);\r\n\t// \tconsole.log('请求数据：', data);\r\n\t// \tif (data?.list?.length) {\r\n\t// \t\tSetdataSource(data.list);\r\n\t// \t\tSetPagination({ ...pagination, total: data.total });\r\n\t// \t} else {\r\n\t// \t\tSetdataSource([]);\r\n\t// \t\tSetPagination({ ...pagination, total: 0 });\r\n\t// \t}\r\n\t// \tSetLoading(false);\r\n\t// };\r\n\t// useEffect(() => {\r\n\t//  GetData();\r\n\t// }, [pagination.page, pagination.pageSize]);\r\n\r\n\tconst quickSearch = () => {};\r\n\r\n\t// * 操作 — 员工： 新建、编辑、详情、删除  按钮\r\n\tconst handleOperator = async (type: string, item: any) => {\r\n\t\t// console.log('handleOperator', type, item);\r\n\t\tif (type === 'create') {\r\n\t\t\tsetModalIsVisible(true);\r\n\t\t\tsetModalTitle('新建用户');\r\n\t\t\tsetModalType(type);\r\n\t\t\tsetModalUserInfo({});\r\n\t\t} else if (['edit'].includes(type)) {\r\n\t\t\tsetModalIsVisible(true);\r\n\t\t\tsetModalTitle(type === 'edit' ? '编辑用户' : '查看详情');\r\n\t\t\tsetModalType(type);\r\n\t\t\tsetModalUserInfo(item);\r\n\t\t} else if (type === 'delete') {\r\n\t\t\tconst hide = message.loading('正在删除');\r\n\t\t\ttry {\r\n\t\t\t\tconst result: any = await DelUser(item._id);\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\thide();\r\n\t\t\t\t\tactionRef?.current?.reload();\r\n\t\t\t\t\tmessage.success(result.data.message);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\thide();\r\n\t\t\t\tmessage.error('删除失败、请再试一次！');\r\n\t\t\t}\r\n\t\t} else if (type === 'moreDelete') {\r\n\t\t\tconst hide = message.loading('正在删除');\r\n\t\t\ttry {\r\n\t\t\t\tconst selectIds = selectedRowsState.map(value => value?._id);\r\n\t\t\t\tconst res: any = await DelMoreUser(selectIds || []);\r\n\t\t\t\tif (res) {\r\n\t\t\t\t\thide();\r\n\t\t\t\t\tsetSelectedRows([]);\r\n\t\t\t\t\tactionRef.current?.reloadAndRest?.();\r\n\t\t\t\t\tmessage.success(res.data.message);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\thide();\r\n\t\t\t\tmessage.error('删除失败、请再试一次！');\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t// * 操作 — 员工： 新建、编辑、详情  弹窗内容提交\r\n\tconst handleModalSubmit = (type: string, item: any) => {\r\n\t\t// 1、获取form字段值 并 过滤出有值的字段\r\n\t\t// 2、字段值传递接口、获取接口结果、并提示出信息\r\n\t\t// 3、重置Modal信息\r\n\t\t// 4、重新请求，根据页码等条件\r\n\t\t// let type = modalType;\r\n\t\t// let formData = form.getFieldsValue();\r\n\t\t// console.log('弹窗Modal：', formData);\r\n\t\t// let res = type === 'create' ? createUser(formData) : editUser(formData)\r\n\t\tconsole.log('Modal 提交：', type, item);\r\n\t\t// setModalTitle('');\r\n\t\t// setModalType('');\r\n\t\t// setModalIsVisible(false);\r\n\t\t// setModalUserInfo({});\r\n\t\tmessage.info('待实现');\r\n\t};\r\n\r\n\tconst handleUserAdd = async () => {\r\n\t\tconst hide = message.loading('正在添加');\r\n\t\ttry {\r\n\t\t\tconst formValues = form.getFieldsValue();\r\n\t\t\tconsole.log('formValues', formValues);\r\n\t\t\tconst result = await addRule({ ...formValues });\r\n\t\t\tif (result) {\r\n\t\t\t\thide();\r\n\t\t\t\tform.resetFields();\r\n\t\t\t\tsetModalIsVisible(false);\r\n\t\t\t\tif (actionRef.current) actionRef.current.reload();\r\n\t\t\t\tmessage.success('Added successfully');\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\thide();\r\n\t\t\tmessage.error('Adding failed, please try again!');\r\n\t\t}\r\n\t};\r\n\t// * 工具栏 ToolBar\r\n\tlet ToolBarParams = {\r\n\t\tsetModalIsVisible, // 工具栏：新建按钮\r\n\t\tquickSearch, // 工具栏：快捷搜索\r\n\t\topenSearch,\r\n\t\tSetOpenSearch, // 工具栏：开启表单搜索\r\n\t\thandleOperator,\r\n\t};\r\n\t// * 列配置 Column\r\n\tlet columnParams: TableColumnsParams = {\r\n\t\tsetCurrentRow,\r\n\t\tsetShowDetail,\r\n\t\thandleOperator,\r\n\t};\r\n\t// & 表格封装成通用\r\n\t// 表格数量量多会如何？ 500 - 5000 - 50000\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ProTable<UserList>\r\n\t\t\t\trowKey='_id'\r\n\t\t\t\tclassName='ant-pro-table-scroll'\r\n\t\t\t\tscroll={{ x: 2500, y: '100vh' }} // 100vh\r\n\t\t\t\tbordered\r\n\t\t\t\tcardBordered\r\n\t\t\t\tdateFormatter='string'\r\n\t\t\t\theaderTitle='使用 ProTable'\r\n\t\t\t\tdefaultSize='small'\r\n\t\t\t\tloading={loading}\r\n\t\t\t\tcolumns={TableColumnsConfig(columnParams)}\r\n\t\t\t\ttoolBarRender={() => ToolBarRender(ToolBarParams)} // 渲染工具栏\r\n\t\t\t\tactionRef={actionRef} // Table action 的引用，便于自定义触发      actionRef.current.reload()  |  actionRef.current.reset()   |   actionRef.current.clearSelected()\r\n\t\t\t\tformRef={formRef} // 可以获取到查询表单的 form 实例\r\n\t\t\t\tsearch={openSearch ? false : { labelWidth: 'auto', filterType: 'query', span: 6 }} // 搜索表单配置 Form\r\n\t\t\t\t// onSubmit={params => {}} // {username: '张三'}  提交表单时触发\r\n\t\t\t\t// onReset={() => {}} // 重置表单时触发\r\n\t\t\t\t// dataSource={dataSource}\r\n\t\t\t\t// request请求、获取所有数据、将数据存储起来、\r\n\t\t\t\trequest={async (params, sort, filter) => {\r\n\t\t\t\t\tSetLoading(true);\r\n\t\t\t\t\tconsole.log('request请求参数：', params, sort, filter);\r\n\t\t\t\t\t// const { data } = await getUserList(params)\r\n\t\t\t\t\tconst { data }: any = await GetProTableUser({ ...params, page: params.current });\r\n\t\t\t\t\t// console.log('请求数据：', data);\r\n\t\t\t\t\tSetLoading(false);\r\n\t\t\t\t\tSetPagination({ ...pagination, total: data.total });\r\n\t\t\t\t\treturn formatDataForProTable<UserList>({ ...data, current: params.current });\r\n\t\t\t\t}}\r\n\t\t\t\tpagination={{\r\n\t\t\t\t\t...pagination,\r\n\t\t\t\t\tpageSizeOptions: [10, 20, 30, 50, 100],\r\n\t\t\t\t\tonChange: (page, pageSize) => {\r\n\t\t\t\t\t\t// SetLoading(true);\r\n\t\t\t\t\t\tconsole.log('page, pageSize', page, pageSize);\r\n\t\t\t\t\t\tSetPagination({ ...pagination, page, pageSize });\r\n\t\t\t\t\t},\r\n\t\t\t\t}}\r\n\t\t\t\trowSelection={{\r\n\t\t\t\t\tonChange: (selectedRowKeys, selectedRows) => {\r\n\t\t\t\t\t\tsetSelectedRows(selectedRows);\r\n\t\t\t\t\t},\r\n\t\t\t\t}}\r\n\t\t\t\tghost={false}\r\n\t\t\t\tonSizeChange={() => {}} // Table 尺寸发生改变、将尺寸存储到数据库中\r\n\t\t\t\tonRequestError={(error: any) => {}} // 数据加载失败时触发\r\n\t\t\t\teditable={{ type: 'multiple' }}\r\n\t\t\t\tcolumnsState={{\r\n\t\t\t\t\t// 持久化列的 key，用于判断是否是同一个 table\r\n\t\t\t\t\tpersistenceKey: 'use-pro-table-key',\r\n\t\t\t\t\t// 持久化列的类型: localStorage | sessionStorage\r\n\t\t\t\t\tpersistenceType: 'localStorage',\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t\t{selectedRowsState?.length > 0 && (\r\n\t\t\t\t<FooterComponent actionRef={actionRef} selectedRowsState={selectedRowsState} setSelectedRows={setSelectedRows} handleOperator={handleOperator} />\r\n\t\t\t)}\r\n\t\t\t<ModalComponent\r\n\t\t\t\tform={form}\r\n\t\t\t\tmodalIsVisible={modalIsVisible}\r\n\t\t\t\tsetModalIsVisible={setModalIsVisible}\r\n\t\t\t\tmodalTitle={modalTitle}\r\n\t\t\t\tmodalType={modalType}\r\n\t\t\t\tmodalUserInfo={modalUserInfo}\r\n\t\t\t\thandleModalSubmit={handleModalSubmit}\r\n\t\t\t/>\r\n\t\t\t<DrawerComponent showDetail={showDetail} currentRow={currentRow} setCurrentRow={setCurrentRow} setShowDetail={setShowDetail} columnParams={columnParams} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default useProTable;\r\n"],"names":["useProTable","actionRef","useRef","formRef","useState","selectedRowsState","setSelectedRows","currentRow","setCurrentRow","showDetail","setShowDetail","pagination","SetPagination","openSearch","SetOpenSearch","loading","SetLoading","form","Form","modalIsVisible","setModalIsVisible","modalTitle","setModalTitle","modalType","setModalType","modalUserInfo","setModalUserInfo","quickSearch","handleOperator","type","item","hide","message","result","DelUser","_a","selectIds","value","res","DelMoreUser","_c","_b","handleModalSubmit","ToolBarParams","columnParams","jsxs","Fragment","jsx","ProTable","TableColumnsConfig","ToolBarRender","params","sort","filter","data","GetProTableUser","formatDataForProTable","page","pageSize","selectedRowKeys","selectedRows","error","FooterComponent","ModalComponent","DrawerComponent"],"mappings":"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"}