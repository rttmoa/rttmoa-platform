{"version":3,"file":"index-90036cc8.js","sources":["../../../src/components/Tables/index.tsx"],"sourcesContent":["import useEventListener from '@/hooks/useEventListener';\nimport math from '@/utils/math';\nimport { Table } from 'antd';\nimport { TableProps } from 'antd/es/table/InternalTable';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { MultiTableProps } from './type';\nimport './index.less';\n\nexport default function Tables<T extends object>(props: MultiTableProps<T>) {\n\t// console.log('Tables props: ', props);\n\tconst { id, xScroll = false, yScroll = false, scroll, dataSource, columns, pagination, selectedRowKeys, rowSelection, updatePage, updateSelectedItem } = props;\n\tconst [state, setState] = useState<any>({});\n\n\tconst dataSourceLength = dataSource?.length;\n\tconst [x, setX] = useState(scroll?.x);\n\t// const [y, setY] = useState(scroll?.y)\n\n\t// 没数据的时候，表头过长，请一定要在规定的区域内，都能左右滑动表头，不能死死的规定鼠标只能在表头范围内才能滑动\n\tuseEffect(() => {\n\t\tif (xScroll && id) {\n\t\t\tconst parent = document.getElementById(id);\n\t\t\tif (parent) {\n\t\t\t\tconst FixedWidth = props\n\t\t\t\t\t.columns!.filter((item: { width: any }) => item.width)\n\t\t\t\t\t.map((item: { width: any }) => Number(item.width))\n\t\t\t\t\t.reduce((m: any, n: any) => m + n, 0);\n\t\t\t\tconst RemainItemArr = props.columns!.filter((item: { width: any }) => !item.width).map((item: { title: any }) => item.title!.toString().length);\n\t\t\t\tconst RemainItemWidth = (Math.max(...RemainItemArr) + 1) * 12 + 8 * 2 + 2;\n\t\t\t\tconst RemainWidth = RemainItemArr.length * RemainItemWidth;\n\t\t\t\t// debugger\n\t\t\t\t// console.log(\"sss\", parent.getBoundingClientRect().width);\n\t\t\t\t// 表头列数据过多时，自动可以横向滚动，不要挤压在一起\n\t\t\t\tsetX(Math.max(parent.getBoundingClientRect().width, FixedWidth + RemainWidth));\n\t\t\t}\n\t\t}\n\t}, [xScroll, id]);\n\n\t// 有数据的时候，请一定要在规定的区域内，表头死活不能上下移动，表格内容死活一定要能上下左右随意滑动\n\t// const handleResizeY = useCallback(() => {\n\t// \tif (yScroll && id) {\n\t// \t\tconst parent = document.getElementById(id)\n\t// \t\tif (parent) {\n\t// \t\t\tconst thead = parent.getElementsByClassName('ant-table-thead')[0]\n\t// \t\t\tif (thead) {\n\t// \t\t\t\tconst ParentHeight = parent.getBoundingClientRect().height\n\t// \t\t\t\tconst TheadHeight = thead.getBoundingClientRect().height\n\t// \t\t\t\tconst height = math.subtract(ParentHeight, TheadHeight)\n\t// \t\t\t\tsetY(height)\n\t// \t\t\t\t// debugger\n\t// \t\t\t\tsetTimeout(() => {\n\t// \t\t\t\t\tconst tbody = parent.getElementsByClassName('ant-table-body')[0]\n\t// \t\t\t\t\tif (tbody) (tbody as HTMLElement).style.height = height + 'px'\n\t// \t\t\t\t\t// 没数据的时候，请一定将“暂无数据”的UI图上下左右居中\n\t// \t\t\t\t\tconst placeholder = parent.getElementsByClassName('ant-table-placeholder')[0]\n\t// \t\t\t\t\tif (placeholder) (placeholder as HTMLElement).style.height = height + 'px'\n\t// \t\t\t\t}, 30)\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }, [yScroll, id, dataSourceLength])\n\t// 初始化\n\t// useEffect(() => {\n\t// \thandleResizeY()\n\t// }, [handleResizeY])\n\t// 监听页面缩放，重新计算高度和宽度\n\t// useEventListener('resize', handleResizeY)\n\n\t//* 处理行点击事件\n\tconst onRowClick = useCallback((record: any, index: number) => {\n\t\t// console.log(\"处理行点击事件 onRowClick\");\n\t\tif (rowSelection === 'checkbox') {\n\t\t\tlet selectedRowKeys = props.selectedRowKeys!;\n\t\t\tlet selectedIds = props.selectedIds;\n\t\t\tlet selectedItem = props.selectedItem;\n\t\t\t// if (selectedIds && selectedIds.length > 0) {\n\t\t\t//   const i = selectedIds.indexOf(record.id);\n\t\t\t//   if (i === -1) {  // 避免重复添加\n\t\t\t//     selectedIds && selectedIds.push(record.id);\n\t\t\t//     selectedRowKeys.push(index);\n\t\t\t// \t\tselectedItem = record\n\t\t\t//   } else {\n\t\t\t//     selectedIds.splice(i, 1);\n\t\t\t//     selectedRowKeys.splice(i, 1);\n\t\t\t// \t\tselectedItem = record\n\t\t\t//   }\n\t\t\t// } else {\n\t\t\t//   selectedIds = [record.id];\n\t\t\t//   selectedRowKeys = [index];\n\t\t\t//   selectedItem = record;\n\t\t\t// }\n\t\t\t// updateSelectedItem && updateSelectedItem(selectedRowKeys, selectedItem, selectedIds);\n\t\t} else {\n\t\t\tlet selectKey = [index];\n\t\t\tconst selectedRowKeys = props.selectedRowKeys;\n\t\t\tif (selectedRowKeys && selectedRowKeys[0] === index) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tupdateSelectedItem && updateSelectedItem(selectKey, record || {});\n\t\t}\n\t}, []);\n\n\t//* 处理行单选框,复选框点击事件\n\tconst rowChange = useCallback((selectedRowKeys: any, selectedRows: any[]) => {\n\t\t// console.log(\"行选择\");\n\t\t// console.log(\"selectedRowKeys\", selectedRowKeys) // (10) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t\t// console.log('selectedRows', selectedRows) // (10) [{…}, {…}, {…}, {…}, ....]\n\t\tlet rowSelectProps = rowSelection;\n\t\tlet selectedIds: number[] = [];\n\t\tif (rowSelectProps === 'checkbox') {\n\t\t\tselectedRows.forEach((item: any) => {\n\t\t\t\tselectedIds.push(item._id); // * 这里是 _id\n\t\t\t});\n\t\t\tsetState({\n\t\t\t\tselectedRowKeys,\n\t\t\t\tselectedIds: selectedIds,\n\t\t\t\tselectedItem: selectedRows[0],\n\t\t\t});\n\t\t}\n\t\tupdateSelectedItem && updateSelectedItem(selectedRowKeys, selectedRows[0], selectedIds);\n\t}, []);\n\n\tconst rowSelectConfig: TableProps['rowSelection'] = {\n\t\ttype: 'radio',\n\t\tselectedRowKeys: selectedRowKeys, // 选择的行数据\n\t\tonChange: rowChange,\n\t\tonSelect: (record: any, selected: any, selectedRows: any) => {\n\t\t\tconsole.log('....');\n\t\t},\n\t\t// onSelectAll: onSelectAll,\n\t\t// renderCell(checked, record, index, originNode): any {\n\t\t// \tconsole.log('redner', checked, record, index, originNode);\n\t\t// }\n\t};\n\t//* 处理行选择：单选框，复选框，无\n\tlet rowSelect: 'checkbox' | 'radio' | false | null = rowSelection;\n\tif ([false, null].includes(rowSelect as any)) {\n\t\trowSelect = false;\n\t} else if (rowSelect === 'checkbox') {\n\t\trowSelectConfig.type = 'checkbox';\n\t} else {\n\t\trowSelect = 'radio';\n\t}\n\n\t// 288 + 430 + 38 = 756\n\n\tlet y = scroll?.y as number;\n\tconsole.log('x,y: ', x, y);\n\t// 389 - 76 - 38 - 32 = 243\n\t// if (y) y = y - 76 - 32 // 高度 - 标题 -分页器 （size=default）\n\tif (y) y = y - 38 - 32; // 高度 - 标题 -分页器 （size=small）\n\t// console.log('dataSource', dataSource && dataSource.length);\n\n\treturn (\n\t\t<Table<T>\n\t\t\tclassName='MultiTable'\n\t\t\t// style={{ minHeight: y > 500 ? 650 : 300 }}\n\t\t\t{...props}\n\t\t\tbordered\n\t\t\tcolumns={columns}\n\t\t\tdataSource={dataSource}\n\t\t\tscroll={{ x, y: y }}\n\t\t\trowSelection={rowSelect ? rowSelectConfig : undefined} // 行选择：checkbox|radio及 选择事件\n\t\t\tonRow={(record: any, index: any) => ({\n\t\t\t\tonClick() {\n\t\t\t\t\tif (!rowSelect) return;\n\t\t\t\t\tonRowClick(record, index);\n\t\t\t\t},\n\t\t\t})}\n\t\t\tpagination={false}\n\t\t\t// pagination={{\n\t\t\t// \tsize: 'default',\n\t\t\t// \t// style: { marginBottom: 0 }, // 防止分页器下方再留空\n\t\t\t// \t// 页码改变的回调，参数是改变后的页码及每页条数\n\t\t\t// \tonChange: (page: number, pageSize: number) => {\n\t\t\t// \t\tconsole.log('onChange 变化的回调', page, pageSize);\n\t\t\t// \t\treturn updatePage && updatePage(page!, pageSize!);\n\t\t\t// \t},\n\t\t\t// \tonShowSizeChange: (page: number, pageSize: number) => {\n\t\t\t// \t\t// console.log(\"onShowSizeChange 变化的回调\", current, size);\n\t\t\t// \t},\n\t\t\t// \t// hideOnSinglePage: true, // 只有一个隐藏分页器 (不需要隐藏分页器)\n\t\t\t// \tcurrent: pagination.page,\n\t\t\t// \tpageSize: pagination.pageSize,\n\t\t\t// \tpageSizeOptions: [5, 10, 15, 20, 50, 100, 500, 1000],\n\t\t\t// \ttotal: pagination.totalCount,\n\t\t\t// \t// showTotal: () => `共 ${pagination.totalCount} 条`,\n\t\t\t// \tshowTotal: () => `共 ${pagination.totalCount} 条`, // \t第 31-40 条 || 总共 27469 条\n\n\t\t\t// \tshowQuickJumper: true,\n\t\t\t// \tshowSizeChanger: true,\n\t\t\t// }}\n\t\t/>\n\t);\n}\n"],"names":["Tables","props","id","xScroll","yScroll","scroll","dataSource","columns","pagination","selectedRowKeys","rowSelection","updatePage","updateSelectedItem","state","setState","useState","x","setX","useEffect","parent","FixedWidth","item","m","n","RemainItemArr","RemainItemWidth","RemainWidth","onRowClick","useCallback","record","index","selectKey","rowChange","selectedRows","rowSelectProps","selectedIds","rowSelectConfig","selected","rowSelect","y","jsx","Table"],"mappings":"uFAQA,SAAwBA,EAAyBC,EAA2B,CAE3E,KAAM,CAAE,GAAAC,EAAI,QAAAC,EAAU,GAAO,QAAAC,EAAU,GAAO,OAAAC,EAAQ,WAAAC,EAAY,QAAAC,EAAS,WAAAC,EAAY,gBAAAC,EAAiB,aAAAC,EAAc,WAAAC,EAAY,mBAAAC,CAAuB,EAAAX,EACnJ,CAACY,EAAOC,CAAQ,EAAIC,EAAA,SAAc,CAAE,CAAA,EAEjBT,GAAA,MAAAA,EAAY,OACrC,KAAM,CAACU,EAAGC,CAAI,EAAIF,EAAAA,SAASV,GAAA,YAAAA,EAAQ,CAAC,EAIpCa,EAAAA,UAAU,IAAM,CACf,GAAIf,GAAWD,EAAI,CACZ,MAAAiB,EAAS,SAAS,eAAejB,CAAE,EACzC,GAAIiB,EAAQ,CACL,MAAAC,EAAanB,EACjB,QAAS,OAAQoB,GAAyBA,EAAK,KAAK,EACpD,IAAKA,GAAyB,OAAOA,EAAK,KAAK,CAAC,EAChD,OAAO,CAACC,EAAQC,IAAWD,EAAIC,EAAG,CAAC,EAC/BC,EAAgBvB,EAAM,QAAS,OAAQoB,GAAyB,CAACA,EAAK,KAAK,EAAE,IAAKA,GAAyBA,EAAK,MAAO,SAAA,EAAW,MAAM,EACxII,GAAmB,KAAK,IAAI,GAAGD,CAAa,EAAI,GAAK,GAAK,EAAI,EAAI,EAClEE,EAAcF,EAAc,OAASC,EAItCR,EAAA,KAAK,IAAIE,EAAO,wBAAwB,MAAOC,EAAaM,CAAW,CAAC,CAC9E,CACD,CAAA,EACE,CAACvB,EAASD,CAAE,CAAC,EAiChB,MAAMyB,EAAaC,EAAAA,YAAY,CAACC,EAAaC,IAAkB,CAE9D,GAAIpB,IAAiB,WACET,EAAM,gBACVA,EAAM,YACLA,EAAM,iBAkBnB,CACF,IAAA8B,EAAY,CAACD,CAAK,EACtB,MAAMrB,EAAkBR,EAAM,gBAC9B,GAAIQ,GAAmBA,EAAgB,CAAC,IAAMqB,EAC7C,OAEDlB,GAAsBA,EAAmBmB,EAAWF,GAAU,CAAE,CAAA,CACjE,CACD,EAAG,CAAE,CAAA,EAGCG,EAAYJ,EAAAA,YAAY,CAACnB,EAAsBwB,IAAwB,CAI5E,IAAIC,EAAiBxB,EACjByB,EAAwB,CAAA,EACxBD,IAAmB,aACTD,EAAA,QAASZ,GAAc,CACvBc,EAAA,KAAKd,EAAK,GAAG,CAAA,CACzB,EACQP,EAAA,CACR,gBAAAL,EACA,YAAA0B,EACA,aAAcF,EAAa,CAAC,CAAA,CAC5B,GAEFrB,GAAsBA,EAAmBH,EAAiBwB,EAAa,CAAC,EAAGE,CAAW,CACvF,EAAG,CAAE,CAAA,EAECC,EAA8C,CACnD,KAAM,QACN,gBAAA3B,EACA,SAAUuB,EACV,SAAU,CAACH,EAAaQ,EAAeJ,IAAsB,CAE7D,CAAA,EAOD,IAAIK,EAAiD5B,EACjD,CAAC,GAAO,IAAI,EAAE,SAAS4B,CAAgB,EAC9BA,EAAA,GACFA,IAAc,WACxBF,EAAgB,KAAO,WAEXE,EAAA,QAKb,IAAIC,EAAIlC,GAAA,YAAAA,EAAQ,EAIZ,OAAAkC,IAAGA,EAAIA,EAAI,GAAK,IAInBC,EAAA,IAACC,EAAA,CACA,UAAU,aAET,GAAGxC,EACJ,SAAQ,GACR,QAAAM,EACA,WAAAD,EACA,OAAQ,CAAE,EAAAU,EAAG,EAAAuB,CAAK,EAClB,aAAcD,EAAYF,EAAkB,OAC5C,MAAO,CAACP,EAAaC,KAAgB,CACpC,SAAU,CACJQ,GACLX,EAAWE,EAAQC,CAAK,CACzB,CAAA,GAED,WAAY,EAAA,CAAA,CAyBf"}