{"version":3,"file":"conductUtil-2d30a3cb.js","sources":["../../../node_modules/rc-tree/es/utils/keyUtil.js","../../../node_modules/rc-tree/es/utils/treeUtil.js","../../../node_modules/rc-tree/es/utils/conductUtil.js"],"sourcesContent":["export default function getEntity(keyEntities, key) {\n  return keyEntities[key];\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport warning from \"rc-util/es/warning\";\nimport getEntity from \"./keyUtil\";\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n        children = _treeNode$props.children,\n        rest = _objectWithoutProperties(_treeNode$props, _excluded);\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n\n      // Add FlattenDataNode into list\n      // We use `Object.assign` here to save perf since babel's `objectSpread` has perf issue\n      var flattenNode = Object.assign(omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren])), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\n\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var _data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(_data);\n    }\n\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n    selectedKeys = _ref3.selectedKeys,\n    loadedKeys = _ref3.loadedKeys,\n    loadingKeys = _ref3.loadingKeys,\n    checkedKeys = _ref3.checkedKeys,\n    halfCheckedKeys = _ref3.halfCheckedKeys,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = getEntity(keyEntities, key);\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}","import warning from \"rc-util/es/warning\";\nimport getEntity from \"./keyUtil\";\nfunction removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {\n  var filteredKeys = new Set();\n  halfCheckedKeys.forEach(function (key) {\n    if (!checkedKeys.has(key)) {\n      filteredKeys.add(key);\n    }\n  });\n  return filteredKeys;\n}\nexport function isCheckDisabled(node) {\n  var _ref = node || {},\n    disabled = _ref.disabled,\n    disableCheckbox = _ref.disableCheckbox,\n    checkable = _ref.checkable;\n  return !!(disabled || disableCheckbox) || checkable === false;\n}\n\n// Fill miss keys\nfunction fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set();\n\n  // Add checked keys top to bottom\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n        node = entity.node,\n        _entity$children = entity.children,\n        children = _entity$children === void 0 ? [] : _entity$children;\n      if (checkedKeys.has(key) && !syntheticGetCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !syntheticGetCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.add(childEntity.key);\n        });\n      }\n    });\n  }\n\n  // Add checked keys from bottom to top\n  var visitedKeys = new Set();\n  for (var _level = maxLevel; _level >= 0; _level -= 1) {\n    var _entities = levelEntities.get(_level) || new Set();\n    _entities.forEach(function (entity) {\n      var parent = entity.parent,\n        node = entity.node;\n\n      // Skip if no need to check\n      if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      }\n\n      // Skip if parent is disabled\n      if (syntheticGetCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !syntheticGetCheckDisabled(childEntity.node);\n      }).forEach(function (_ref2) {\n        var key = _ref2.key;\n        var checked = checkedKeys.has(key);\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n      if (allChecked) {\n        checkedKeys.add(parent.key);\n      }\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n      visitedKeys.add(parent.key);\n    });\n  }\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n}\n\n// Remove useless key\nfunction cleanConductCheck(keys, halfKeys, levelEntities, maxLevel, syntheticGetCheckDisabled) {\n  var checkedKeys = new Set(keys);\n  var halfCheckedKeys = new Set(halfKeys);\n\n  // Remove checked keys from top to bottom\n  for (var level = 0; level <= maxLevel; level += 1) {\n    var entities = levelEntities.get(level) || new Set();\n    entities.forEach(function (entity) {\n      var key = entity.key,\n        node = entity.node,\n        _entity$children2 = entity.children,\n        children = _entity$children2 === void 0 ? [] : _entity$children2;\n      if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !syntheticGetCheckDisabled(node)) {\n        children.filter(function (childEntity) {\n          return !syntheticGetCheckDisabled(childEntity.node);\n        }).forEach(function (childEntity) {\n          checkedKeys.delete(childEntity.key);\n        });\n      }\n    });\n  }\n\n  // Remove checked keys form bottom to top\n  halfCheckedKeys = new Set();\n  var visitedKeys = new Set();\n  for (var _level2 = maxLevel; _level2 >= 0; _level2 -= 1) {\n    var _entities2 = levelEntities.get(_level2) || new Set();\n    _entities2.forEach(function (entity) {\n      var parent = entity.parent,\n        node = entity.node;\n\n      // Skip if no need to check\n      if (syntheticGetCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      }\n\n      // Skip if parent is disabled\n      if (syntheticGetCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n      var allChecked = true;\n      var partialChecked = false;\n      (parent.children || []).filter(function (childEntity) {\n        return !syntheticGetCheckDisabled(childEntity.node);\n      }).forEach(function (_ref3) {\n        var key = _ref3.key;\n        var checked = checkedKeys.has(key);\n        if (allChecked && !checked) {\n          allChecked = false;\n        }\n        if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n          partialChecked = true;\n        }\n      });\n      if (!allChecked) {\n        checkedKeys.delete(parent.key);\n      }\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n      visitedKeys.add(parent.key);\n    });\n  }\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys))\n  };\n}\n\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */\nexport function conductCheck(keyList, checked, keyEntities, getCheckDisabled) {\n  var warningMissKeys = [];\n  var syntheticGetCheckDisabled;\n  if (getCheckDisabled) {\n    syntheticGetCheckDisabled = getCheckDisabled;\n  } else {\n    syntheticGetCheckDisabled = isCheckDisabled;\n  }\n\n  // We only handle exist keys\n  var keys = new Set(keyList.filter(function (key) {\n    var hasEntity = !!getEntity(keyEntities, key);\n    if (!hasEntity) {\n      warningMissKeys.push(key);\n    }\n    return hasEntity;\n  }));\n  var levelEntities = new Map();\n  var maxLevel = 0;\n\n  // Convert entities by level for calculation\n  Object.keys(keyEntities).forEach(function (key) {\n    var entity = keyEntities[key];\n    var level = entity.level;\n    var levelSet = levelEntities.get(level);\n    if (!levelSet) {\n      levelSet = new Set();\n      levelEntities.set(level, levelSet);\n    }\n    levelSet.add(entity);\n    maxLevel = Math.max(maxLevel, level);\n  });\n  warning(!warningMissKeys.length, \"Tree missing follow keys: \".concat(warningMissKeys.slice(0, 100).map(function (key) {\n    return \"'\".concat(key, \"'\");\n  }).join(', ')));\n  var result;\n  if (checked === true) {\n    result = fillConductCheck(keys, levelEntities, maxLevel, syntheticGetCheckDisabled);\n  } else {\n    result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel, syntheticGetCheckDisabled);\n  }\n  return result;\n}"],"names":["getEntity","keyEntities","key","_excluded","getPosition","level","index","isTreeNode","node","getKey","pos","fillFieldNames","fieldNames","_ref","title","_title","children","mergedTitle","convertTreeToData","rootNodes","dig","treeNodes","toArray","treeNode","warning","_treeNode$props","rest","_objectWithoutProperties","dataNode","_objectSpread","parsedChildren","flattenTreeData","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","flattenList","list","parent","mergedKey","i","fieldTitle","flattenNode","omit","_toConsumableArray","traverseDataNodes","dataNodes","callback","config","mergedConfig","_typeof","_mergedConfig","childrenPropName","externalGetKey","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","_data","subNode","subIndex","convertDataToEntities","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","wrapper","item","parentPos","nodes","entity","getTreeNodeProps","_ref3","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","convertNodePropsToEventData","props","data","expanded","selected","checked","loaded","loading","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","active","eventKey","eventData","removeFromCheckedKeys","filteredKeys","isCheckDisabled","disabled","disableCheckbox","checkable","fillConductCheck","keys","levelEntities","maxLevel","syntheticGetCheckDisabled","entities","_entity$children","childEntity","visitedKeys","_level","_entities","allChecked","partialChecked","cleanConductCheck","halfKeys","_entity$children2","_level2","_entities2","conductCheck","keyList","getCheckDisabled","warningMissKeys","hasEntity","levelSet","result"],"mappings":"sFAAe,SAASA,EAAUC,EAAaC,EAAK,CAClD,OAAOD,EAAYC,CAAG,CACxB,CCEA,IAAIC,EAAY,CAAC,UAAU,EAKpB,SAASC,EAAYC,EAAOC,EAAO,CACxC,MAAO,GAAG,OAAOD,EAAO,GAAG,EAAE,OAAOC,CAAK,CAC3C,CACO,SAASC,EAAWC,EAAM,CAC/B,OAAOA,GAAQA,EAAK,MAAQA,EAAK,KAAK,UACxC,CACO,SAASC,EAAOP,EAAKQ,EAAK,CAC/B,OAAIR,GAGGQ,CACT,CACO,SAASC,EAAeC,EAAY,CACzC,IAAIC,EAAOD,GAAc,CAAE,EACzBE,EAAQD,EAAK,MACbE,EAASF,EAAK,OACdX,EAAMW,EAAK,IACXG,EAAWH,EAAK,SACdI,EAAcH,GAAS,QAC3B,MAAO,CACL,MAAOG,EACP,OAAQF,GAAU,CAACE,CAAW,EAC9B,IAAKf,GAAO,MACZ,SAAUc,GAAY,UAC1B,CACA,CAyBO,SAASE,EAAkBC,EAAW,CAC3C,SAASC,EAAIZ,EAAM,CACjB,IAAIa,EAAYC,EAAQd,CAAI,EAC5B,OAAOa,EAAU,IAAI,SAAUE,EAAU,CAEvC,GAAI,CAAChB,EAAWgB,CAAQ,EACtBC,OAAAA,EAAQ,CAACD,EAAU,qDAAqD,EACjE,KAET,IAAIrB,EAAMqB,EAAS,IACfE,EAAkBF,EAAS,MAC7BP,EAAWS,EAAgB,SAC3BC,EAAOC,EAAyBF,EAAiBtB,CAAS,EACxDyB,EAAWC,EAAc,CAC3B,IAAK3B,CACN,EAAEwB,CAAI,EACHI,EAAiBV,EAAIJ,CAAQ,EACjC,OAAIc,EAAe,SACjBF,EAAS,SAAWE,GAEfF,CACb,CAAK,EAAE,OAAO,SAAUA,EAAU,CAC5B,OAAOA,CACb,CAAK,CACF,CACD,OAAOR,EAAID,CAAS,CACtB,CAQO,SAASY,EAAgBC,EAAcC,EAAcrB,EAAY,CACtE,IAAIsB,EAAkBvB,EAAeC,CAAU,EAC7CuB,EAAcD,EAAgB,OAC9BE,EAAWF,EAAgB,IAC3BG,EAAgBH,EAAgB,SAC9BI,EAAiB,IAAI,IAAIL,IAAiB,GAAO,CAAA,EAAKA,CAAY,EAClEM,EAAc,CAAA,EAClB,SAASnB,EAAIoB,EAAM,CACjB,IAAIC,EAAS,UAAU,OAAS,GAAK,UAAU,CAAC,IAAM,OAAY,UAAU,CAAC,EAAI,KACjF,OAAOD,EAAK,IAAI,SAAUjB,EAAUjB,EAAO,CAMzC,QALII,EAAMN,EAAYqC,EAASA,EAAO,IAAM,IAAKnC,CAAK,EAClDoC,EAAYjC,EAAOc,EAASa,CAAQ,EAAG1B,CAAG,EAG1CO,EACK0B,EAAI,EAAGA,EAAIR,EAAY,OAAQQ,GAAK,EAAG,CAC9C,IAAIC,EAAaT,EAAYQ,CAAC,EAC9B,GAAIpB,EAASqB,CAAU,IAAM,OAAW,CACtC3B,EAAcM,EAASqB,CAAU,EACjC,KACD,CACF,CAID,IAAIC,EAAc,OAAO,OAAOC,EAAKvB,EAAU,CAAE,EAAC,OAAOwB,EAAmBZ,CAAW,EAAG,CAACC,EAAUC,CAAa,CAAC,CAAC,EAAG,CACrH,MAAOpB,EACP,IAAKyB,EACL,OAAQD,EACR,IAAK/B,EACL,SAAU,KACV,KAAMa,EACN,QAAS,CAAE,EAAC,OAAOwB,EAAmBN,EAASA,EAAO,QAAU,EAAE,EAAG,CAACnC,IAAU,CAAC,CAAC,EAClF,MAAO,CAAA,EAAG,OAAOyC,EAAmBN,EAASA,EAAO,MAAQ,CAAE,CAAA,EAAG,CAACnC,IAAUkC,EAAK,OAAS,CAAC,CAAC,CACpG,CAAO,EACD,OAAAD,EAAY,KAAKM,CAAW,EAGxBZ,IAAiB,IAAQK,EAAe,IAAII,CAAS,EACvDG,EAAY,SAAWzB,EAAIG,EAASc,CAAa,GAAK,CAAA,EAAIQ,CAAW,EAErEA,EAAY,SAAW,GAElBA,CACb,CAAK,CACF,CACD,OAAAzB,EAAIY,CAAY,EACTO,CACT,CAKO,SAASS,EAAkBC,EAAWC,EAE7CC,EAAQ,CACN,IAAIC,EAAe,CAAA,EACfC,EAAQF,CAAM,IAAM,SACtBC,EAAeD,EAEfC,EAAe,CACb,eAAgBD,CACtB,EAEEC,EAAeA,GAAgB,GAG/B,IAAIE,EAAgBF,EAClBG,EAAmBD,EAAc,iBACjCE,EAAiBF,EAAc,eAC/B1C,EAAa0C,EAAc,WACzBG,EAAmB9C,EAAeC,CAAU,EAC9CwB,EAAWqB,EAAiB,IAC5BpB,EAAgBoB,EAAiB,SAC/BC,EAAwBH,GAAoBlB,EAG5CsB,EACAH,EACE,OAAOA,GAAmB,SAC5BG,EAAkB,SAAyBnD,EAAM,CAC/C,OAAOA,EAAKgD,CAAc,CAClC,EACe,OAAOA,GAAmB,aACnCG,EAAkB,SAAyBnD,EAAM,CAC/C,OAAOgD,EAAehD,CAAI,CAClC,GAGImD,EAAkB,SAAyBnD,EAAME,EAAK,CACpD,OAAOD,EAAOD,EAAK4B,CAAQ,EAAG1B,CAAG,CACvC,EAIE,SAASkD,EAAYpD,EAAMF,EAAOmC,EAAQoB,EAAW,CACnD,IAAI7C,EAAWR,EAAOA,EAAKkD,CAAqB,EAAIT,EAChDvC,EAAMF,EAAOJ,EAAYqC,EAAO,IAAKnC,CAAK,EAAI,IAC9CwD,EAAetD,EAAO,CAAE,EAAC,OAAOuC,EAAmBc,CAAS,EAAG,CAACrD,CAAI,CAAC,EAAI,GAG7E,GAAIA,EAAM,CACR,IAAIN,EAAMyD,EAAgBnD,EAAME,CAAG,EAC/BqD,EAAQ,CACV,KAAMvD,EACN,MAAOF,EACP,IAAKI,EACL,IAAKR,EACL,UAAWuC,EAAO,KAAOA,EAAO,IAAM,KACtC,MAAOA,EAAO,MAAQ,EACtB,MAAOqB,CACf,EACMZ,EAASa,CAAK,CACf,CAGG/C,GACFA,EAAS,QAAQ,SAAUgD,EAASC,EAAU,CAC5CL,EAAYI,EAASC,EAAU,CAC7B,KAAMzD,EACN,IAAKE,EACL,MAAO+B,EAASA,EAAO,MAAQ,EAAI,EACpC,EAAEqB,CAAY,CACvB,CAAO,CAEJ,CACDF,EAAY,IAAI,CAClB,CAIO,SAASM,EAAsBjB,EAAW,CAC/C,IAAIkB,EAAQ,UAAU,OAAS,GAAK,UAAU,CAAC,IAAM,OAAY,UAAU,CAAC,EAAI,CAAE,EAChFC,EAAcD,EAAM,YACpBE,EAAgBF,EAAM,cACtBG,EAAoBH,EAAM,kBAC1BX,EAAiBW,EAAM,eACvBZ,EAAmBY,EAAM,iBACzBvD,EAAauD,EAAM,WAErBI,EAAuB,UAAU,OAAS,EAAI,UAAU,CAAC,EAAI,OAEzDC,EAAuBhB,GAAkBe,EACzCE,EAAc,CAAA,EACdxE,EAAc,CAAA,EACdyE,EAAU,CACZ,YAAaD,EACb,YAAaxE,CACjB,EACE,OAAImE,IACFM,EAAUN,EAAYM,CAAO,GAAKA,GAEpC1B,EAAkBC,EAAW,SAAU0B,EAAM,CAC3C,IAAInE,EAAOmE,EAAK,KACdrE,EAAQqE,EAAK,MACbjE,EAAMiE,EAAK,IACXzE,EAAMyE,EAAK,IACXC,EAAYD,EAAK,UACjBtE,EAAQsE,EAAK,MACbE,EAAQF,EAAK,MACXG,EAAS,CACX,KAAMtE,EACN,MAAOqE,EACP,MAAOvE,EACP,IAAKJ,EACL,IAAKQ,EACL,MAAOL,CACb,EACQqC,EAAYjC,EAAOP,EAAKQ,CAAG,EAC/B+D,EAAY/D,CAAG,EAAIoE,EACnB7E,EAAYyC,CAAS,EAAIoC,EAGzBA,EAAO,OAASL,EAAYG,CAAS,EACjCE,EAAO,SACTA,EAAO,OAAO,SAAWA,EAAO,OAAO,UAAY,GACnDA,EAAO,OAAO,SAAS,KAAKA,CAAM,GAEhCT,GACFA,EAAcS,EAAQJ,CAAO,CAEnC,EAAK,CACD,eAAgBF,EAChB,iBAAkBjB,EAClB,WAAY3C,CAChB,CAAG,EACG0D,GACFA,EAAkBI,CAAO,EAEpBA,CACT,CAIO,SAASK,EAAiB7E,EAAK8E,EAAO,CAC3C,IAAI/C,EAAe+C,EAAM,aACvBC,EAAeD,EAAM,aACrBE,EAAaF,EAAM,WACnBG,EAAcH,EAAM,YACpBI,EAAcJ,EAAM,YACpBK,EAAkBL,EAAM,gBACxBM,EAAkBN,EAAM,gBACxBO,EAAeP,EAAM,aACrB/E,EAAc+E,EAAM,YAClBF,EAAS9E,EAAUC,EAAaC,CAAG,EACnCsF,EAAgB,CAClB,SAAUtF,EACV,SAAU+B,EAAa,QAAQ/B,CAAG,IAAM,GACxC,SAAU+E,EAAa,QAAQ/E,CAAG,IAAM,GACxC,OAAQgF,EAAW,QAAQhF,CAAG,IAAM,GACpC,QAASiF,EAAY,QAAQjF,CAAG,IAAM,GACtC,QAASkF,EAAY,QAAQlF,CAAG,IAAM,GACtC,YAAamF,EAAgB,QAAQnF,CAAG,IAAM,GAC9C,IAAK,OAAO4E,EAASA,EAAO,IAAM,EAAE,EAIpC,SAAUQ,IAAoBpF,GAAOqF,IAAiB,EACtD,eAAgBD,IAAoBpF,GAAOqF,IAAiB,GAC5D,kBAAmBD,IAAoBpF,GAAOqF,IAAiB,CACnE,EACE,OAAOC,CACT,CACO,SAASC,EAA4BC,EAAO,CACjD,IAAIC,EAAOD,EAAM,KACfE,EAAWF,EAAM,SACjBG,EAAWH,EAAM,SACjBI,EAAUJ,EAAM,QAChBK,EAASL,EAAM,OACfM,EAAUN,EAAM,QAChBO,EAAcP,EAAM,YACpBQ,EAAWR,EAAM,SACjBS,EAAiBT,EAAM,eACvBU,EAAoBV,EAAM,kBAC1BhF,EAAMgF,EAAM,IACZW,EAASX,EAAM,OACfY,EAAWZ,EAAM,SACfa,EAAY1E,EAAcA,EAAc,CAAA,EAAI8D,CAAI,EAAG,GAAI,CACzD,SAAUC,EACV,SAAUC,EACV,QAASC,EACT,OAAQC,EACR,QAASC,EACT,YAAaC,EACb,SAAUC,EACV,eAAgBC,EAChB,kBAAmBC,EACnB,IAAK1F,EACL,OAAQ2F,EACR,IAAKC,CACT,CAAG,EACD,MAAM,UAAWC,GACf,OAAO,eAAeA,EAAW,QAAS,CACxC,IAAK,UAAe,CAClB/E,OAAAA,EAAQ,GAAO,uIAAuI,EAC/IkE,CACR,CACP,CAAK,EAEIa,CACT,CC/VA,SAASC,EAAsBnB,EAAiBD,EAAa,CAC3D,IAAIqB,EAAe,IAAI,IACvB,OAAApB,EAAgB,QAAQ,SAAUnF,EAAK,CAChCkF,EAAY,IAAIlF,CAAG,GACtBuG,EAAa,IAAIvG,CAAG,CAE1B,CAAG,EACMuG,CACT,CACO,SAASC,EAAgBlG,EAAM,CACpC,IAAIK,EAAOL,GAAQ,CAAE,EACnBmG,EAAW9F,EAAK,SAChB+F,EAAkB/F,EAAK,gBACvBgG,EAAYhG,EAAK,UACnB,MAAO,CAAC,EAAE8F,GAAYC,IAAoBC,IAAc,EAC1D,CAGA,SAASC,EAAiBC,EAAMC,EAAeC,EAAUC,EAA2B,CAKlF,QAJI9B,EAAc,IAAI,IAAI2B,CAAI,EAC1B1B,EAAkB,IAAI,IAGjBhF,EAAQ,EAAGA,GAAS4G,EAAU5G,GAAS,EAAG,CACjD,IAAI8G,EAAWH,EAAc,IAAI3G,CAAK,GAAK,IAAI,IAC/C8G,EAAS,QAAQ,SAAUrC,EAAQ,CACjC,IAAI5E,EAAM4E,EAAO,IACftE,EAAOsE,EAAO,KACdsC,EAAmBtC,EAAO,SAC1B9D,EAAWoG,IAAqB,OAAS,CAAA,EAAKA,EAC5ChC,EAAY,IAAIlF,CAAG,GAAK,CAACgH,EAA0B1G,CAAI,GACzDQ,EAAS,OAAO,SAAUqG,EAAa,CACrC,MAAO,CAACH,EAA0BG,EAAY,IAAI,CAC5D,CAAS,EAAE,QAAQ,SAAUA,EAAa,CAChCjC,EAAY,IAAIiC,EAAY,GAAG,CACzC,CAAS,CAET,CAAK,CACF,CAID,QADIC,EAAc,IAAI,IACbC,EAASN,EAAUM,GAAU,EAAGA,GAAU,EAAG,CACpD,IAAIC,EAAYR,EAAc,IAAIO,CAAM,GAAK,IAAI,IACjDC,EAAU,QAAQ,SAAU1C,EAAQ,CAClC,IAAIrC,EAASqC,EAAO,OAClBtE,EAAOsE,EAAO,KAGhB,GAAI,EAAAoC,EAA0B1G,CAAI,GAAK,CAACsE,EAAO,QAAUwC,EAAY,IAAIxC,EAAO,OAAO,GAAG,GAK1F,IAAIoC,EAA0BpC,EAAO,OAAO,IAAI,EAAG,CACjDwC,EAAY,IAAI7E,EAAO,GAAG,EAC1B,MACD,CACD,IAAIgF,EAAa,GACbC,EAAiB,IACpBjF,EAAO,UAAY,CAAE,GAAE,OAAO,SAAU4E,EAAa,CACpD,MAAO,CAACH,EAA0BG,EAAY,IAAI,CAC1D,CAAO,EAAE,QAAQ,SAAUlD,EAAO,CAC1B,IAAIjE,EAAMiE,EAAM,IACZ2B,EAAUV,EAAY,IAAIlF,CAAG,EAC7BuH,GAAc,CAAC3B,IACjB2B,EAAa,IAEX,CAACC,IAAmB5B,GAAWT,EAAgB,IAAInF,CAAG,KACxDwH,EAAiB,GAE3B,CAAO,EACGD,GACFrC,EAAY,IAAI3C,EAAO,GAAG,EAExBiF,GACFrC,EAAgB,IAAI5C,EAAO,GAAG,EAEhC6E,EAAY,IAAI7E,EAAO,GAAG,EAChC,CAAK,CACF,CACD,MAAO,CACL,YAAa,MAAM,KAAK2C,CAAW,EACnC,gBAAiB,MAAM,KAAKoB,EAAsBnB,EAAiBD,CAAW,CAAC,CACnF,CACA,CAGA,SAASuC,EAAkBZ,EAAMa,EAAUZ,EAAeC,EAAUC,EAA2B,CAK7F,QAJI9B,EAAc,IAAI,IAAI2B,CAAI,EAC1B1B,EAAkB,IAAI,IAAIuC,CAAQ,EAG7BvH,EAAQ,EAAGA,GAAS4G,EAAU5G,GAAS,EAAG,CACjD,IAAI8G,EAAWH,EAAc,IAAI3G,CAAK,GAAK,IAAI,IAC/C8G,EAAS,QAAQ,SAAUrC,EAAQ,CACjC,IAAI5E,EAAM4E,EAAO,IACftE,EAAOsE,EAAO,KACd+C,EAAoB/C,EAAO,SAC3B9D,EAAW6G,IAAsB,OAAS,CAAA,EAAKA,EAC7C,CAACzC,EAAY,IAAIlF,CAAG,GAAK,CAACmF,EAAgB,IAAInF,CAAG,GAAK,CAACgH,EAA0B1G,CAAI,GACvFQ,EAAS,OAAO,SAAUqG,EAAa,CACrC,MAAO,CAACH,EAA0BG,EAAY,IAAI,CAC5D,CAAS,EAAE,QAAQ,SAAUA,EAAa,CAChCjC,EAAY,OAAOiC,EAAY,GAAG,CAC5C,CAAS,CAET,CAAK,CACF,CAGDhC,EAAkB,IAAI,IAEtB,QADIiC,EAAc,IAAI,IACbQ,EAAUb,EAAUa,GAAW,EAAGA,GAAW,EAAG,CACvD,IAAIC,EAAaf,EAAc,IAAIc,CAAO,GAAK,IAAI,IACnDC,EAAW,QAAQ,SAAUjD,EAAQ,CACnC,IAAIrC,EAASqC,EAAO,OAClBtE,EAAOsE,EAAO,KAGhB,GAAI,EAAAoC,EAA0B1G,CAAI,GAAK,CAACsE,EAAO,QAAUwC,EAAY,IAAIxC,EAAO,OAAO,GAAG,GAK1F,IAAIoC,EAA0BpC,EAAO,OAAO,IAAI,EAAG,CACjDwC,EAAY,IAAI7E,EAAO,GAAG,EAC1B,MACD,CACD,IAAIgF,EAAa,GACbC,EAAiB,IACpBjF,EAAO,UAAY,CAAE,GAAE,OAAO,SAAU4E,EAAa,CACpD,MAAO,CAACH,EAA0BG,EAAY,IAAI,CAC1D,CAAO,EAAE,QAAQ,SAAUrC,EAAO,CAC1B,IAAI9E,EAAM8E,EAAM,IACZc,EAAUV,EAAY,IAAIlF,CAAG,EAC7BuH,GAAc,CAAC3B,IACjB2B,EAAa,IAEX,CAACC,IAAmB5B,GAAWT,EAAgB,IAAInF,CAAG,KACxDwH,EAAiB,GAE3B,CAAO,EACID,GACHrC,EAAY,OAAO3C,EAAO,GAAG,EAE3BiF,GACFrC,EAAgB,IAAI5C,EAAO,GAAG,EAEhC6E,EAAY,IAAI7E,EAAO,GAAG,EAChC,CAAK,CACF,CACD,MAAO,CACL,YAAa,MAAM,KAAK2C,CAAW,EACnC,gBAAiB,MAAM,KAAKoB,EAAsBnB,EAAiBD,CAAW,CAAC,CACnF,CACA,CAQO,SAAS4C,EAAaC,EAASnC,EAAS7F,EAAaiI,EAAkB,CAC5E,IAAIC,EAAkB,CAAA,EAClBjB,EACAgB,EACFhB,EAA4BgB,EAE5BhB,EAA4BR,EAI9B,IAAIK,EAAO,IAAI,IAAIkB,EAAQ,OAAO,SAAU/H,EAAK,CAC/C,IAAIkI,EAAY,CAAC,CAACpI,EAAUC,EAAaC,CAAG,EAC5C,OAAKkI,GACHD,EAAgB,KAAKjI,CAAG,EAEnBkI,CACR,CAAA,CAAC,EACEpB,EAAgB,IAAI,IACpBC,EAAW,EAGf,OAAO,KAAKhH,CAAW,EAAE,QAAQ,SAAUC,EAAK,CAC9C,IAAI4E,EAAS7E,EAAYC,CAAG,EACxBG,EAAQyE,EAAO,MACfuD,EAAWrB,EAAc,IAAI3G,CAAK,EACjCgI,IACHA,EAAW,IAAI,IACfrB,EAAc,IAAI3G,EAAOgI,CAAQ,GAEnCA,EAAS,IAAIvD,CAAM,EACnBmC,EAAW,KAAK,IAAIA,EAAU5G,CAAK,CACvC,CAAG,EACDmB,EAAQ,CAAC2G,EAAgB,OAAQ,6BAA6B,OAAOA,EAAgB,MAAM,EAAG,GAAG,EAAE,IAAI,SAAUjI,EAAK,CACpH,MAAO,IAAI,OAAOA,EAAK,GAAG,CAC3B,CAAA,EAAE,KAAK,IAAI,CAAC,CAAC,EACd,IAAIoI,EACJ,OAAIxC,IAAY,GACdwC,EAASxB,EAAiBC,EAAMC,EAAeC,EAAUC,CAAyB,EAElFoB,EAASX,EAAkBZ,EAAMjB,EAAQ,gBAAiBkB,EAAeC,EAAUC,CAAyB,EAEvGoB,CACT","x_google_ignoreList":[0,1,2]}