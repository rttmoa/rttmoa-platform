{"version":3,"file":"tableVirtual-3bdb79c1.js","sources":["../../../src/views/list/basicTable/components/tableVirtual.tsx"],"sourcesContent":["import React from \"react\";\nimport { Button, Segmented, Space, Switch, Table, Typography } from \"antd\";\nimport type { TableProps } from \"antd\";\n\ninterface RecordType {\n  id: number;\n  firstName: string;\n  lastName: string;\n  age: number;\n  address1: string;\n  address2: string;\n  address3: string;\n}\n\nconst fixedColumns: TableProps<RecordType>[\"columns\"] = [\n  {\n    title: \"ID\",\n    dataIndex: \"id\",\n    width: 100,\n    fixed: \"left\"\n  },\n  {\n    title: \"FistName\",\n    dataIndex: \"firstName\",\n    width: 120,\n    fixed: \"left\"\n  },\n  {\n    title: \"LastName\",\n    dataIndex: \"lastName\",\n    width: 120,\n    fixed: \"left\"\n  },\n  {\n    title: \"Group\",\n    width: 120,\n    render: (_, record) => `Group ${Math.floor(record.id / 4)}`,\n    onCell: record => ({\n      rowSpan: record.id % 4 === 0 ? 4 : 0\n    })\n  },\n  {\n    title: \"Age\",\n    dataIndex: \"age\",\n    width: 100,\n    onCell: record => ({\n      colSpan: record.id % 4 === 0 ? 2 : 1\n    })\n  },\n  {\n    title: \"Address 1\",\n    dataIndex: \"address1\",\n    onCell: record => ({\n      colSpan: record.id % 4 === 0 ? 0 : 1\n    })\n  },\n  {\n    title: \"Address 2\",\n    dataIndex: \"address2\"\n  },\n  {\n    title: \"Address 3\",\n    dataIndex: \"address3\"\n  },\n  {\n    title: \"Action\",\n    width: 150,\n    fixed: \"right\",\n    render: () => (\n      <Space>\n        <Typography.Link>Action1</Typography.Link>\n        <Typography.Link>Action2</Typography.Link>\n      </Space>\n    )\n  }\n];\n\nconst columns: TableProps<RecordType>[\"columns\"] = [\n  {\n    title: \"ID\",\n    dataIndex: \"id\",\n    width: 100\n  },\n  {\n    title: \"FistName\",\n    dataIndex: \"firstName\",\n    width: 120\n  },\n  {\n    title: \"LastName\",\n    dataIndex: \"lastName\",\n    width: 120\n  }\n];\n\nconst getData = (count: number) => {\n  const data: RecordType[] = new Array(count).fill(null).map((_, index) => ({\n    id: index,\n    firstName: `First_${index.toString(16)}`,\n    lastName: `Last_${index.toString(16)}`,\n    age: 25 + (index % 10),\n    address1: `New York No. ${index} Lake Park`,\n    address2: `London No. ${index} Lake Park`,\n    address3: `Sydney No. ${index} Lake Park`\n  }));\n\n  return data;\n};\n\nconst App: any = ({ isShow }: any) => {\n  const [fixed, setFixed] = React.useState(true);\n  const [bordered, setBordered] = React.useState(true);\n  const [expanded, setExpanded] = React.useState(false);\n  const [empty, setEmpty] = React.useState(false);\n  const [count, setCount] = React.useState(10000);\n\n  const tblRef: Parameters<typeof Table>[0][\"ref\"] = React.useRef(null);\n  const data = React.useMemo(() => getData(count), [count]);\n\n  const mergedColumns = React.useMemo<typeof fixedColumns>(() => {\n    if (!fixed) {\n      return columns;\n    }\n\n    if (!expanded) {\n      return fixedColumns;\n    }\n\n    return fixedColumns.map(col => ({ ...col, onCell: undefined }));\n  }, [expanded, fixed]);\n\n  const expandableProps = React.useMemo<TableProps<RecordType>[\"expandable\"]>(() => {\n    if (!expanded) {\n      return undefined;\n    }\n\n    return {\n      columnWidth: 48,\n      expandedRowRender: record => <p style={{ margin: 0 }}>ðŸŽ‰ Expanded {record.address1}</p>,\n      rowExpandable: record => record.id % 2 === 0\n    };\n  }, [expanded]);\n\n  return (\n    isShow && (\n      <div style={{ padding: 64 }}>\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <Space>\n            <Switch\n              checked={bordered}\n              onChange={() => setBordered(!bordered)}\n              checkedChildren=\"Bordered\"\n              unCheckedChildren=\"Bordered\"\n            />\n            <Switch checked={fixed} onChange={() => setFixed(!fixed)} checkedChildren=\"Fixed\" unCheckedChildren=\"Fixed\" />\n            <Switch\n              checked={expanded}\n              onChange={() => setExpanded(!expanded)}\n              checkedChildren=\"Expandable\"\n              unCheckedChildren=\"Expandable\"\n            />\n            <Switch checked={empty} onChange={() => setEmpty(!empty)} checkedChildren=\"Empty\" unCheckedChildren=\"Empty\" />\n            <Segmented\n              value={count}\n              onChange={(value: any) => setCount(value)}\n              options={[\n                {\n                  label: \"None\",\n                  value: 0\n                },\n                {\n                  label: \"Less\",\n                  value: 4\n                },\n                {\n                  label: \"Lot\",\n                  value: 10000\n                }\n              ]}\n            />\n\n            {data.length >= 999 && (\n              <Button\n                onClick={() => {\n                  tblRef.current?.scrollTo({ index: 999 });\n                }}\n              >\n                Scroll To index 999\n              </Button>\n            )}\n          </Space>\n\n          <Table\n            bordered={bordered}\n            virtual\n            columns={mergedColumns}\n            scroll={{ x: 2000, y: 400 }}\n            rowKey=\"id\"\n            dataSource={empty ? [] : data}\n            pagination={false}\n            ref={tblRef}\n            rowSelection={\n              expanded\n                ? undefined\n                : {\n                    type: \"radio\",\n                    columnWidth: 48\n                  }\n            }\n            expandable={expandableProps}\n          />\n        </Space>\n      </div>\n    )\n  );\n};\n\nexport default App;\n"],"names":["fixedColumns","_","record","jsxs","Space","jsx","Typography","columns","getData","count","index","App","isShow","fixed","setFixed","React","bordered","setBordered","expanded","setExpanded","empty","setEmpty","setCount","tblRef","data","mergedColumns","col","expandableProps","Switch","Segmented","value","Button","_a","Table"],"mappings":"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"}