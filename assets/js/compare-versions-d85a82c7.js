const f=/^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i,i=t=>{if(typeof t!="string")throw new TypeError("Invalid argument expected string");const r=t.match(f);if(!r)throw new Error(`Invalid argument not valid semver ('${t}' received)`);return r.shift(),r},a=t=>t==="*"||t==="x"||t==="X",p=t=>{const r=parseInt(t,10);return isNaN(r)?t:r},u=(t,r)=>typeof t!=typeof r?[String(t),String(r)]:[t,r],l=(t,r)=>{if(a(t)||a(r))return 0;const[n,e]=u(p(t),p(r));return n>e?1:n<e?-1:0},d=(t,r)=>{for(let n=0;n<Math.max(t.length,r.length);n++){const e=l(t[n]||"0",r[n]||"0");if(e!==0)return e}return 0},m=(t,r)=>{const n=i(t),e=i(r),o=n.pop(),s=e.pop(),c=d(n,e);return c!==0?c:o&&s?d(o.split("."),s.split(".")):o||s?o?-1:1:0};export{m as c};
