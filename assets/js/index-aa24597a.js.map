{"version":3,"file":"index-aa24597a.js","sources":["../../../src/views/system/dept/index.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { Form } from 'antd';\nimport { formatDataForProTable } from '@/utils';\nimport { UserList } from '@/api/interface';\nimport { ProTable } from '@ant-design/pro-components';\nimport type { ActionType, FormInstance } from '@ant-design/pro-components';\nimport { message } from '@/hooks/useMessage';\nimport TableColumnsConfig, { TableColumnsParams } from './component/ColumnConfig';\nimport ToolBarRender from './component/ToolBar';\nimport { addDept, delDept, findDept, modifyDept } from '@/api/modules/upack/common';\nimport './index.less';\nimport ModalComponent from './component/Modal';\nimport DrawerComponent from './component/Drawer';\nimport FooterComponent from './component/Footer';\n\nexport type FormValueType = {\n\ttarget?: string;\n\ttemplate?: string;\n\ttype?: string;\n\ttime?: string;\n\tfrequency?: string;\n} & Partial<UserList>;\n\n// TODO: refer： https://github.com/ant-design/ant-design-pro\n// ProTable：https://procomponents.ant.design/components/table\n// 表格数量量多会如何？ 500 - 5000 - 50000\nconst useProTable = () => {\n\tconst actionRef = useRef<ActionType>(); // 表格 ref\n\tconst formRef = useRef<FormInstance>(); // 表单 ref\n\n\tconst [form] = Form.useForm();\n\n\tconst [openSearch, SetOpenSearch] = useState<boolean>(false); // 工具栏：开启关闭表单搜索\n\tconst [loading, SetLoading] = useState<boolean>(false); // Loading：加载Loading\n\tconst [pagination, SetPagination] = useState<any>({ page: 1, pageSize: 10, total: 0 }); // 分页数据\n\tconst [selectedRowsState, setSelectedRows] = useState<any[]>([]); // 表格：选择行数据\n\n\t// Drawer\n\tconst [currentRow, setCurrentRow] = useState<UserList>(); // Drawer 选择当前行数据\n\tconst [showDetail, setShowDetail] = useState<boolean>(false); // Drawer 是否显示\n\n\t// Modal\n\tconst [modalIsVisible, setModalIsVisible] = useState<boolean>(false);\n\tconst [modalTitle, setModalTitle] = useState<string>('');\n\tconst [modalType, setModalType] = useState<string>('');\n\tconst [modalUserInfo, setModalUserInfo] = useState({});\n\n\tconst [expandedRowKeys, setExpandedRowKeys] = useState<React.Key[]>([]);\n\tconst [menuList, setMenuList] = useState<[]>([]);\n\n\tconst quickSearch = () => {};\n\n\t// * 操作 — 员工： 新建、编辑、详情、删除  按钮\n\tconst handleOperator = async (type: string, item: any) => {\n\t\tconsole.log('操作：类型+记录', type, item);\n\t\tif (type === 'create') {\n\t\t\tsetModalIsVisible(true);\n\t\t\tsetModalTitle('新建菜单');\n\t\t\tsetModalType(type);\n\t\t\tsetModalUserInfo({});\n\t\t} else if (['edit'].includes(type)) {\n\t\t\tsetModalIsVisible(true);\n\t\t\tsetModalTitle(type === 'edit' ? '编辑菜单' : '查看详情');\n\t\t\tsetModalType(type);\n\t\t\tsetModalUserInfo(item);\n\t\t} else if (type === 'delete') {\n\t\t\tconst hide = message.loading('正在删除');\n\t\t\ttry {\n\t\t\t\tconst result: any = await delDept(item.unique);\n\t\t\t\t// console.log('删除菜单结果：', result);\n\t\t\t\tif (result) {\n\t\t\t\t\thide();\n\t\t\t\t\tactionRef?.current?.reload();\n\t\t\t\t\tmessage.success(`删除 ${item?.name} 成功`);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\thide();\n\t\t\t\tmessage.error('删除失败、请再试一次！');\n\t\t\t}\n\t\t} else if (type === 'moreDelete') {\n\t\t\tmessage.loading('删除更多按钮、正在实现');\n\t\t\t// const hide = message.loading('正在删除');\n\t\t\t// try {\n\t\t\t// \tconst selectIds = selectedRowsState.map(value => value?._id);\n\t\t\t// \tconsole.log('selectIds', selectIds);\n\t\t\t// \tconst res: any = await delMoreJob(selectIds || []);\n\t\t\t// \tif (res) {\n\t\t\t// \t\thide();\n\t\t\t// \t\tsetSelectedRows([]);\n\t\t\t// \t\tactionRef.current?.reloadAndRest?.();\n\t\t\t// \t\tmessage.success('全部删除完成！');\n\t\t\t// \t}\n\t\t\t// } catch (error) {\n\t\t\t// \thide();\n\t\t\t// \tmessage.error('删除失败、请再试一次！');\n\t\t\t// }\n\t\t}\n\t};\n\t// * 操作 — 员工： 新建、编辑、详情  弹窗内容提交\n\tconst handleModalSubmit = async (type: string, item: any) => {\n\t\tconsole.log('Modal 提交：', type, item);\n\t\t// 1、获取字段数据\n\t\t// 2、将字段传入到接口中\n\t\t// 3、获取返回值并展示\n\t\t// 4、清空表单值\n\t\t// 5、关闭弹窗\n\t\t// 6、重新回去菜单列表\n\t\tconst hide = message.loading(type == 'create' ? '正在添加' : '正在编辑');\n\t\ttry {\n\t\t\tlet res = type === 'create' ? await addDept(item) : await modifyDept(item._id, item);\n\t\t\tif (res) {\n\t\t\t\thide();\n\t\t\t\tform.resetFields();\n\t\t\t\tsetModalTitle('');\n\t\t\t\tsetModalType('');\n\t\t\t\tsetModalIsVisible(false);\n\t\t\t\tsetModalUserInfo({});\n\t\t\t\tif (actionRef.current) actionRef.current.reload();\n\t\t\t\tmessage.success(type == 'create' ? '添加成功' : '编辑成功');\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\thide();\n\t\t\tmessage.error(error.message || error.msg);\n\t\t}\n\t};\n\n\t// * 工具栏 ToolBar\n\tlet ToolBarParams: any = {\n\t\tquickSearch, // 工具栏：快捷搜索\n\t\topenSearch,\n\t\tSetOpenSearch, // 工具栏：开启表单搜索\n\t\thandleOperator,\n\t};\n\t// * 列配置 Column\n\tlet columnParams: TableColumnsParams = {\n\t\tsetCurrentRow,\n\t\tsetShowDetail,\n\t\thandleOperator,\n\t};\n\t// * 表格封装成通用\n\treturn (\n\t\t<>\n\t\t\t<ProTable<UserList>\n\t\t\t\trowKey='unique' // ! 此key设置错误、导致点击某一个展开、全部节点全展开\n\t\t\t\tclassName='ant-pro-table-scroll'\n\t\t\t\tscroll={{ y: '100vh' }} // 100vh\n\t\t\t\tbordered\n\t\t\t\t// cardBordered\n\t\t\t\tdateFormatter='string'\n\t\t\t\theaderTitle='使用 ProTable'\n\t\t\t\tdefaultSize='small'\n\t\t\t\tloading={loading}\n\t\t\t\tcolumns={TableColumnsConfig(columnParams)}\n\t\t\t\ttoolBarRender={() => ToolBarRender(ToolBarParams)} // 渲染工具栏\n\t\t\t\tactionRef={actionRef} // Table action 的引用，便于自定义触发 actionRef.current.reset()\n\t\t\t\tformRef={formRef} // 可以获取到查询表单的 form 实例\n\t\t\t\trequest={async (params, sort, filter) => {\n\t\t\t\t\tSetLoading(true);\n\t\t\t\t\tconst res: any = await findDept({});\n\t\t\t\t\t// console.log('获取菜单：', res);\n\t\t\t\t\tlet format = {\n\t\t\t\t\t\tlist: res.data,\n\t\t\t\t\t\tcurrent: res.page || 1,\n\t\t\t\t\t\tpageSize: res.pageSise || 10,\n\t\t\t\t\t\ttotal: res.total || 10,\n\t\t\t\t\t};\n\t\t\t\t\tsetMenuList(res.data);\n\t\t\t\t\tSetLoading(false);\n\t\t\t\t\tSetPagination({ ...pagination, total: format.total });\n\t\t\t\t\treturn formatDataForProTable<any>({ ...format });\n\t\t\t\t}}\n\t\t\t\tsearch={false}\n\t\t\t\tpagination={false}\n\t\t\t\toptions={false}\n\t\t\t\trowSelection={{\n\t\t\t\t\tonChange: (selectedRowKeys, selectedRows) => {\n\t\t\t\t\t\tsetSelectedRows(selectedRows);\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\tghost={false}\n\t\t\t\tonSizeChange={() => {}} // Table 尺寸发生改变、将尺寸存储到数据库中\n\t\t\t\tonRequestError={(error: any) => {}} // 数据加载失败时触发\n\t\t\t\teditable={{ type: 'multiple' }}\n\t\t\t\tcolumnsState={{\n\t\t\t\t\t// 持久化列的 key，用于判断是否是同一个 table\n\t\t\t\t\tpersistenceKey: 'use-pro-table-key',\n\t\t\t\t\t// 持久化列的类型: localStorage | sessionStorage\n\t\t\t\t\tpersistenceType: 'localStorage',\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t{selectedRowsState?.length > 0 && (\n\t\t\t\t<FooterComponent actionRef={actionRef} selectedRowsState={selectedRowsState} setSelectedRows={setSelectedRows} handleOperator={handleOperator} />\n\t\t\t)}\n\t\t\t{/* 新建 / 编辑 Modal弹窗 */}\n\t\t\t<ModalComponent\n\t\t\t\tform={form}\n\t\t\t\tmenuList={menuList}\n\t\t\t\tmodalTitle={modalTitle} // 标题\n\t\t\t\tmodalType={modalType} // 类型\n\t\t\t\tmodalIsVisible={modalIsVisible} // 显示\n\t\t\t\tmodalMenuInfo={modalUserInfo} // 菜单信息\n\t\t\t\tsetModalIsVisible={setModalIsVisible} // 设置显示\n\t\t\t\thandleModalSubmit={handleModalSubmit}\n\t\t\t/>\n\t\t\t<DrawerComponent showDetail={showDetail} currentRow={currentRow} setCurrentRow={setCurrentRow} setShowDetail={setShowDetail} columnParams={columnParams} />\n\t\t</>\n\t);\n};\n\nexport default useProTable;\n"],"names":["useProTable","actionRef","useRef","formRef","form","Form","openSearch","SetOpenSearch","useState","loading","SetLoading","pagination","SetPagination","selectedRowsState","setSelectedRows","currentRow","setCurrentRow","showDetail","setShowDetail","modalIsVisible","setModalIsVisible","modalTitle","setModalTitle","modalType","setModalType","modalUserInfo","setModalUserInfo","menuList","setMenuList","quickSearch","handleOperator","type","item","hide","message","delDept","_a","handleModalSubmit","addDept","modifyDept","error","ToolBarParams","columnParams","jsxs","Fragment","jsx","ProTable","TableColumnsConfig","ToolBarRender","params","sort","filter","res","findDept","format","formatDataForProTable","selectedRowKeys","selectedRows","FooterComponent","ModalComponent","DrawerComponent"],"mappings":"+xEA0BA,MAAMA,GAAc,IAAM,CACzB,MAAMC,EAAYC,EAAAA,SACZC,EAAUD,EAAAA,SAEV,CAACE,CAAI,EAAIC,EAAK,QAAQ,EAEtB,CAACC,EAAYC,CAAa,EAAIC,WAAkB,EAAK,EACrD,CAACC,EAASC,CAAU,EAAIF,WAAkB,EAAK,EAC/C,CAACG,EAAYC,CAAa,EAAIJ,EAAc,SAAA,CAAE,KAAM,EAAG,SAAU,GAAI,MAAO,CAAG,CAAA,EAC/E,CAACK,EAAmBC,CAAe,EAAIN,EAAA,SAAgB,CAAE,CAAA,EAGzD,CAACO,EAAYC,CAAa,EAAIR,EAAmB,SAAA,EACjD,CAACS,EAAYC,CAAa,EAAIV,WAAkB,EAAK,EAGrD,CAACW,EAAgBC,CAAiB,EAAIZ,WAAkB,EAAK,EAC7D,CAACa,EAAYC,CAAa,EAAId,WAAiB,EAAE,EACjD,CAACe,EAAWC,CAAY,EAAIhB,WAAiB,EAAE,EAC/C,CAACiB,EAAeC,CAAgB,EAAIlB,EAAA,SAAS,CAAE,CAAA,EAEPA,EAAAA,SAAsB,CAAA,CAAE,EACtE,KAAM,CAACmB,EAAUC,CAAW,EAAIpB,EAAA,SAAa,CAAE,CAAA,EAEzCqB,EAAc,IAAM,CAAA,EAGpBC,EAAiB,MAAOC,EAAcC,IAAc,OAEzD,GAAID,IAAS,SACZX,EAAkB,EAAI,EACtBE,EAAc,MAAM,EACpBE,EAAaO,CAAI,EACjBL,EAAiB,CAAE,CAAA,UACT,CAAC,MAAM,EAAE,SAASK,CAAI,EAChCX,EAAkB,EAAI,EACRE,EAAAS,IAAS,OAAS,OAAS,MAAM,EAC/CP,EAAaO,CAAI,EACjBL,EAAiBM,CAAI,UACXD,IAAS,SAAU,CACvB,MAAAE,EAAOC,EAAQ,QAAQ,MAAM,EAC/B,GAAA,CACiB,MAAMC,EAAQH,EAAK,MAAM,IAGvCC,KACLG,EAAAnC,GAAA,YAAAA,EAAW,UAAX,MAAAmC,EAAoB,SACpBF,EAAQ,QAAQ,MAAMF,GAAA,YAAAA,EAAM,IAAI,KAAK,QAEvB,CACVC,IACLC,EAAQ,MAAM,aAAa,CAC5B,CAAA,MACUH,IAAS,cACnBG,EAAQ,QAAQ,aAAa,CAgB9B,EAGKG,EAAoB,MAAON,EAAcC,IAAc,CAQ5D,MAAMC,EAAOC,EAAQ,QAAQH,GAAQ,SAAW,OAAS,MAAM,EAC3D,GAAA,EACOA,IAAS,SAAW,MAAMO,EAAQN,CAAI,EAAI,MAAMO,EAAWP,EAAK,IAAKA,CAAI,KAE7EC,IACL7B,EAAK,YAAY,EACjBkB,EAAc,EAAE,EAChBE,EAAa,EAAE,EACfJ,EAAkB,EAAK,EACvBM,EAAiB,CAAE,CAAA,EACfzB,EAAU,SAASA,EAAU,QAAQ,SACzCiC,EAAQ,QAAQH,GAAQ,SAAW,OAAS,MAAM,SAE3CS,EAAY,CACfP,IACLC,EAAQ,MAAMM,EAAM,SAAWA,EAAM,GAAG,CACzC,CAAA,EAID,IAAIC,EAAqB,CACxB,YAAAZ,EACA,WAAAvB,EACA,cAAAC,EACA,eAAAuB,CAAA,EAGGY,EAAmC,CACtC,cAAA1B,EACA,cAAAE,EACA,eAAAY,CAAA,EAGD,OAEEa,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAACC,EAAA,CACA,OAAO,SACP,UAAU,uBACV,OAAQ,CAAE,EAAG,OAAQ,EACrB,SAAQ,GAER,cAAc,SACd,YAAY,cACZ,YAAY,QACZ,QAAArC,EACA,QAASsC,EAAmBL,CAAY,EACxC,cAAe,IAAMM,EAAcP,CAAa,EAChD,UAAAxC,EACA,QAAAE,EACA,QAAS,MAAO8C,EAAQC,EAAMC,IAAW,CACxCzC,EAAW,EAAI,EACf,MAAM0C,EAAW,MAAMC,EAAS,CAAA,CAAE,EAElC,IAAIC,EAAS,CACZ,KAAMF,EAAI,KACV,QAASA,EAAI,MAAQ,EACrB,SAAUA,EAAI,UAAY,GAC1B,MAAOA,EAAI,OAAS,EAAA,EAErB,OAAAxB,EAAYwB,EAAI,IAAI,EACpB1C,EAAW,EAAK,EAChBE,EAAc,CAAE,GAAGD,EAAY,MAAO2C,EAAO,MAAO,EAC7CC,EAA2B,CAAE,GAAGD,CAAA,CAAQ,CAChD,EACA,OAAQ,GACR,WAAY,GACZ,QAAS,GACT,aAAc,CACb,SAAU,CAACE,EAAiBC,IAAiB,CAC5C3C,EAAgB2C,CAAY,CAC7B,CACD,EACA,MAAO,GACP,aAAc,IAAM,CAAC,EACrB,eAAiBjB,GAAe,CAAC,EACjC,SAAU,CAAE,KAAM,UAAW,EAC7B,aAAc,CAEb,eAAgB,oBAEhB,gBAAiB,cAClB,CAAA,CACD,GACC3B,GAAA,YAAAA,EAAmB,QAAS,GAC5BgC,MAACa,GAAgB,UAAAzD,EAAsB,kBAAAY,EAAsC,gBAAAC,EAAkC,eAAAgB,EAAgC,EAGhJe,EAAA,IAACc,EAAA,CACA,KAAAvD,EACA,SAAAuB,EACA,WAAAN,EACA,UAAAE,EACA,eAAAJ,EACA,cAAeM,EACf,kBAAAL,EACA,kBAAAiB,CAAA,CACD,QACCuB,EAAgB,CAAA,WAAA3C,EAAwB,WAAAF,EAAwB,cAAAC,EAA8B,cAAAE,EAA8B,aAAAwB,EAA4B,CAC1J,CAAA,CAAA,CAEF"}